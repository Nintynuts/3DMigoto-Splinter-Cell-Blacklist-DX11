// Videos on Displays - Reflections

#include "CB/PerCubeMapRenderCell.hlsl"

cbuffer CB_PS_FakeGlassMaterial_Static : register(b7)
{
	bool bEnvGammaControl : packoffset(c0);
	bool bEnvPass : packoffset(c0.y);
	bool bFresnel : packoffset(c0.z);
	float4 data0 : packoffset(c1);
	float4 data1 : packoffset(c2);
	float4 data2 : packoffset(c3);
	float4 reflectionCol : packoffset(c4);
	float4 refractionCol : packoffset(c5);
	float4 edgeCol : packoffset(c6);
}
#include "texture.hlsl"
TEXTURE(_2D,sScreenMap,0,2);
TEXTURE(_2D,sFingerMap,2,0);
TEXTURE(_2D,sAltScreenMap,3,3);
TEXTURE(_Cube,sEnvMap,9,1);

#include "3Dmigoto.hlsl"

void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float4 v2 : TEXCOORD1,
	float4 v3 : TEXCOORD2,
	float4 v4 : TEXCOORD3,
	float3 v5 : TEXCOORD4,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2,r3,r4,r5;
	uint4 bitmask, uiDest;
	float4 fDest;
	
	// manual normalise to keep length
	r0.x = rsqrt(dot(v4.xyz, v4.xyz));
	r0.yzw = v4.xyz * r0.x;
	r1.xyz = normalise(v3.xyz);
	r2.y = dot(r0.yzw, r1.xyz);
	r1.w = r2.y + r2.y;
	r2.y = saturate(-r2.y);
	r0.yzw = r1.xyz * -r1.w + r0.yzw;
	r3.xyz = -data1.xyz + v2.xyz;
	r3.xyz = r3.xyz / data0.y;
	r0.yzw = r3.xyz + r0.yzw;

	// TODO: Find a depth adjustment for cubemaps

	r4 = SAMPLE_LVL(sEnvMap, r0.yzw, 0);
	r5 = SAMPLE_LVL(sEnvMap, r0.yzw, 3);
	r0.yzw = r5.xyz * r5.w;
	r0.yzw = r0.yzw * r0.yzw;
	r0.yzw = gCubemapScale.x * r0.yzw;
	r4.xyz = r4.xyz * r4.w;
	r4.xyz = r4.xyz * r4.xyz;
	r4.xyz = gCubemapScale.x * r4.xyz;
	r2.xz = 1 - r2.y;
	r2.xzw = r2.xxy * r2.zzy;
	r5 = -1 + data2;
	r2 = saturate(r2 * r5 + 1);
	r4.xyz = r4.xyz * r2.w;
	r0.yzw = r0.yzw * r2.y - r4.xyz;
	r1.w = SAMPLE(sFingerMap, v1.xy).y;
	r1.w = saturate(r1.w);
	r0.yzw = r1.w * r0.yzw + r4.xyz;
	r0.yzw = reflectionCol.xyz * r0.yzw;
	r0.yzw = log2(r0.yzw);
	r0.yzw = reflectionCol.w * r0.yzw;
	r0.yzw = exp2(r0.yzw);
	r4.xyz = SAMPLE(sAltScreenMap, v1.zw).xyz;
	r5.xyz = SAMPLE(sScreenMap, v1.xy).xyz;
	r4.xyz = -r5.xyz + r4.xyz;
	r4.xyz = data0.w * r4.xyz + r5.xyz;
	r4.xyz = r4.xyz * r4.xyz;
	r4.xyz = v5.x * r4.xyz;
	r2.xyw = r4.xyz * r2.x;
	r0.yzw = r2.xyw * data0.z + r0.yzw;
	r2.xyw = v4.xyz * r0.x - r1.xyz;
	r2.xyw = 0.5 * r2.xyw;
	r0.x = dot(r2.xyw, -r1.xyz);
	r0.x = r0.x + r0.x;
	r1.xyz = r1.xyz * r0.x + r2.xyw;
	r1.xyz = r1.xyz + r3.xyz;
	r1 = SAMPLE_LVL(sEnvMap, r1.xyz, data1.w);
	r1.xyz = r1.xyz * r1.w;
	r1.xyz = r1.xyz * r1.xyz;
	r1.xyz = gCubemapScale.x * r1.xyz;
	r1.xyz = v5.z * r1.xyz;
	r1.xyz = r1.xyz * r2.z;
	r1.xyz = edgeCol.xyz * r1.xyz;
	r1.xyz = log2(r1.xyz);
	r1.xyz = edgeCol.w * r1.xyz;
	r1.xyz = exp2(r1.xyz);
	o0.xyz = r1.xyz + r0.yzw;
	o0.w = 1;
	return;
}