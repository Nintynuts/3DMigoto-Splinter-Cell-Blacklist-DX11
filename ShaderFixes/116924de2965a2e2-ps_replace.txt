// Deferred Static (Cubemap + Displacement)

#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"
#include "CB/PS_FullDeferredMaterial_Static.hlsl"
#include "texture.hlsl"
#include "3Dmigoto.hlsl"

TEXTURE(_2D,sDiffuseMap,0,1);
TEXTURE(_2D,sNormalMap,1,2);
TEXTURE(_2D,sSpecularMap,2,3);
TEXTURE(_2D,sDisplacementMap,4,0);
TEXTURE(_Cube,sEnvMap,9,4);
TEXTURE(_2D,sSelfAOMap,12,5);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = cViewPosStereo() - v2.xyz;
  r0.xyz = normalise(r0.xyz);
  r1.x = dot(v3.xyz, r0.xyz);
  r1.y = dot(v4.xyz, r0.xyz);
  r0.w = r1.y / r1.x;
  r2.yw = float2(-0.25,0.25);
  r2.xz = data0.z;
  r3 = r2.yxwz * -r1.xyxy;
  r2 = r3 * r2 + v1.xyxy;
  r1.z = SAMPLE(sDisplacementMap, r2.xy).x;
  r4.y = 0.5 - r1.z;
  r1.z = cmp(-0.25 >= r4.y);
  r1.w = r1.x / 2;
  r4.w = r1.w / -r1.y;
  r4.x = r3.x / -r1.y;
  r4.z = 0;
  r5 = r1.z ? r4.wzxy : 0;
  r1.z = SAMPLE(sDisplacementMap, v1.xy).x;
  r4.w = 0.5 - r1.z;
  r1.z = cmp(0 >= r4.w);
  r5 = r1.z ? r4 : r5;
  r1.z = SAMPLE(sDisplacementMap, r2.zw).x;
  r4.y = 0.5 - r1.z;
  r1.z = cmp(0.25 >= r4.y);
  r4.x = r3.z / -r1.y;
  r2 = r1.z ? r4.zwxy : r5;
  r3.y = 0.5;
  r3.x = data0.z;
  r1.zw = r3.yx * -r1.xy;
  r3.xy = r1.zw * r3.xy + v1.xy;
  r1.w = SAMPLE(sDisplacementMap, r3.xy).x;
  r4.w = 0.5 - r1.w;
  r1.w = cmp(0.5 >= r4.w);
  r4.z = r1.z / -r1.y;
  r2 = r1.w ? r4 : r2;
  r1.zw = r2.wz - r2.yx;
  r1.z = r1.z / r1.w;
  r1.w = -r1.z * r2.z + r2.w;
  r1.z = -r1.z + r0.w;
  r3.w = r1.w / r1.z;
  r1.z = r3.w * r0.w;
  r4.xy = -r1.xy * r1.z;
  r4.xy = r4.xy * data0.z + v1.xy;
  r1.w = SAMPLE(sDisplacementMap, r4.xy).x;
  r3.x = 0.5 - r1.w;
  r1.w = cmp(r3.x < r1.z);
  r3.yz = r2.xy;
  r2.xy = r3.wx;
  r2 = r1.w ? r3.yzwx : r2;
  r1.w = -r0.w * r3.w + r3.x;
  r1.w = cmp(0.01 < abs(r1.w));
  r4.xy = r2.wz - r2.yx;
  r4.x = r4.x / r4.y;
  r4.y = -r4.x * r2.z + r2.w;
  r4.x = -r4.x + r0.w;
  r3.w = r4.y / r4.x;
  r4.x = r3.w * r0.w;
  r4.yz = r4.x * -r1.xy;
  r4.yz = r4.yz * data0.z + v1.xy;
  r4.y = SAMPLE(sDisplacementMap, r4.yz).x;
  if (r1.w != 0) {
    r3.x = 0.5 - r4.y;
    r4.y = cmp(r3.x < r4.x);
    r3.yz = r2.xy;
    r2.xy = r3.wx;
    r2 = r4.y ? r3.yzwx : r2;
    r5.xy = r2.xy;
    r2.xw = r2.zw;
    r1.z = r4.x;
    r2.z = r3.x;
  } else {
    r5.xy = r2.xy;
    r2.xw = r2.zw;
    r2.z = r3.x;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r3.y = r3.x - r1.z;
  r3.y = cmp(0.01 < abs(r3.y));
  r1.w = r1.w ? r3.y : 0;
  r3.yz = r2.wx - r5.yx;
  r3.y = r3.y / r3.z;
  r3.z = -r3.y * r2.x + r2.w;
  r3.y = -r3.y + r0.w;
  r5.z = r3.z / r3.y;
  r3.y = r5.z * r0.w;
  r3.zw = r3.y * -r1.xy;
  r3.zw = r3.zw * data0.z + v1.xy;
  r3.z = SAMPLE(sDisplacementMap, r3.zw).x;
  if (r1.w != 0) {
    r5.w = 0.5 - r3.z;
    r3.z = cmp(r5.w < r3.y);
    r2.yz = r5.zw;
    r5 = r3.z ? r5 : r2.yzxw;
    r3.x = r2.z;
    r1.z = r3.y;
    r2.xw = r5.zw;
  }
  r1.z = r3.x - r1.z;
  r1.z = cmp(0.01 < abs(r1.z));
  r1.z = r1.z ? r1.w : 0;
  r1.w = r2.w - r5.y;
  r2.y = r2.x - r5.x;
  r1.w = r1.w / r2.y;
  r2.x = -r1.w * r2.x + r2.w;
  r1.w = -r1.w + r0.w;
  r1.w = r2.x / r1.w;
  r0.w = r1.w * r0.w;
  r2.xy = -r1.xy * r0.w;
  r2.xy = r2.xy * data0.z + v1.xy;
  r0.w = SAMPLE(sDisplacementMap, r2.xy).x;
  if (r1.z != 0) {
    r2.z = 0.5 - r0.w;
  }
  r0.w = data0.z * r2.z;
  r1.xy = r0.w * -r1.xy + v1.xy;
  r2.xyz = SAMPLE(sDiffuseMap, r1.xy).xyz;
  r2.xyz = r2.xyz * r2.xyz;
  r1.zw = SAMPLE(sNormalMap, r1.xy).xy;
  r1.zw = r1.zw * 2 - 1;
  r0.w = dot(r1.zw, r1.zw);
  r0.w = min(1, r0.w);
  r0.w = 1 - r0.w;
  r0.w = sqrt(r0.w);
  r3.xyz = v4.xyz * r1.w;
  r3.xyz = r1.z * v3.xyz + r3.xyz;
  r3.xyz = r0.w * v5.xyz + r3.xyz;
  r3.xyz = normalise(r3.xyz);
  r2.xyz = cDiffCol.xyz * r2.xyz;
  r1.xyz = SAMPLE(sSpecularMap, r1.xy).xyz;
  r0.w = data0.y * r1.y;
  r1.w = 1 - data0.w;
  r1.w = r1.z * r1.w + data0.w;
  r1.z = r1.z * r1.w;
  r1.z = data0.x * r1.z;
  r1.z = log2(r1.z);
  r1.x = r1.z * r1.x;
  o1.w = saturate(r1.x / 11);
  r1.x = dot(r3.xyz, r0.xyz);
  r1.x = r1.x + r1.x;
  r0.xyz = r1.x * r3.xyz - r0.xyz;
  r4 = SAMPLE_LVL(sEnvMap, r0.xyz, data1.x);
  r0.xyz = r4.xyz * r4.w;
  r0.xyz = r0.xyz * r0.xyz;
  r0.xyz = gCubemapScale.x * r0.xyz;
  r0.xyz = cEnvCol.xyz * r0.xyz;
  r0.xyz = r0.xyz * r1.y;
  r1.x = SAMPLE(sSelfAOMap, v1.zw).x;
  r1.y = r1.x * r1.x - 1;
  r1.y = gAOControl * r1.y + 1;
  o0.y = r1.x * r1.y;
  r0.w = 0.375 * r0.w;
  r0.w = sqrt(r0.w);
  o2.w = min(1, r0.w);
  o2.xyz = sqrt(r2.xyz);
  o1.xyz = r3.xyz * 0.5 + 0.5;
  r0.xyz = r2.xyz * v6.xyz + r0.xyz;
  r0.xyz = gCubemapScale.y * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = max(1e-4, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r0.w = min(1, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = r0.w / 255;
  r0.xyz = r0.xyz / r0.w;
  o3.xyz = min(1, r0.xyz);
  o0.x = v2.w;
  o0.zw = 0;
  o3.w = r0.w;
  return;
}