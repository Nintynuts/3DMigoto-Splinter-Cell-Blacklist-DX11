// Lighting - Shadows (Low)

#include "Lighting - Shadows.hlsl"

TEXTURE(_2D,sLightAlpha,13,1);
TEXTURE_CMP(_2D,g_txLightDepth,14,14);

void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float v2 : TEXCOORD1,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2,r3;

	r0.xy = -0.5 + v0.xy;
	r0.xy = r0.xy * cVPSB.xy + cVPSB.zw;
	r0.zw = v1.zw / v2.x;
	r1.z = SAMPLE(sSceneDepth, r0.zw).x;
	r1.xy = r1.z * r0.xy;
	r1.w = 1;

	stereo_unfix_(r1);
	
	r0 = mul(r1, cScreenToLight);
	r0 = r0 / r0.w;
	r1.y = 1;
	r1.xz = shadow_map_res.y;
	r1.xyz = r1.xyz * r0.w;
	r2.y = shadow_map_res.y;
	r2.xz = float2(-1,0);
	r3.xyz = r1.xyz * r2.xyz + r0.xyw;
	r3.xy = r3.xy / r3.z;
	r1.w = SAMPLE(sLightAlpha, r3.xy).z;
	r3.xyz = r1.yyz * r2.yyz + r0.xyw;
	r1.xyz = r1.yxz * r2.yxz + r0.xyw;
	r1.xy = r1.xy / r1.z;
	r1.x = SAMPLE(sLightAlpha, r1.xy).z;
	r1.yz = r3.xy / r3.z;
	r1.y = SAMPLE(sLightAlpha, r1.yz).z;
	r1.y = max(r1.w, r1.y);
	r1.z = shadow_map_res.y * r0.w;
	r2.xyz = r1.z * float3(-1,-1,0) + r0.xyw;
	r1.zw = r2.xy / r2.z;
	r1.z = SAMPLE(sLightAlpha, r1.zw).z;
	r1.x = max(r1.z, r1.x);
	r1.x = max(r1.x, r1.y);

	r1.yzw = r0.xyz / r0.w;
	r2 = shadow_map_res.y * float4(-0.5,0,0.5,0) + r1.yzyz;
	r0.z = SAMPLE_CMP_LVL(g_txLightDepth, r2.xy, r1.w).x;
	r0.w = SAMPLE_CMP_LVL(g_txLightDepth, r2.zw, r1.w).x;
	r0.z = r0.z + r0.w;
	r2 = shadow_map_res.y * float4(0,0.5,0,-0.5) + r1.yzyz;
	r0.w = SAMPLE_CMP_LVL(g_txLightDepth, r2.xy, r1.w).x;
	r2.x = SAMPLE_CMP_LVL(g_txLightDepth, r2.zw, r1.w).x;
	r0.z = r0.z + r0.w;
	r0.z = r0.z + r2.x;
	r2 = shadow_map_res.y * float4(-0.5,-0.5,0.5,0.5) + r1.yzyz;
	r0.w = SAMPLE_CMP_LVL(g_txLightDepth, r2.xy, r1.w).x;
	r2.x = SAMPLE_CMP_LVL(g_txLightDepth, r2.zw, r1.w).x;
	r0.z = r0.z + r0.w;
	r3 = shadow_map_res.y * float4(0.5,-0.5,-0.5,0.5) + r1.yzyz;
	r0.w = SAMPLE_CMP_LVL(g_txLightDepth, r3.xy, r1.w).x;
	r1.y = SAMPLE_CMP_LVL(g_txLightDepth, r3.zw, r1.w).x;

	r0.z = r0.z + r0.w;
	r0.z = r0.z + r1.y;
	r0.z = r0.z + r2.x;
	r0.w = r0.z / 8;
	r0.z = -r0.z * 0.125 + 1;
	r0.z = r1.x * r0.z + r0.w;
	o0.xyz = r0.z * cShadowFade.x + cShadowFade.y;

	r0.xy = r0.xy * cScale.xy + cBias.xy;
	r0.xy = saturate(abs(r0.xy) * cShadowFade.z + cShadowFade.w);
	r0.x = 1 - r0.x;
	r0.x = r0.y * -r0.x + r0.x;
	o0.w = bFade ? r0.x : 1;
	return;
}
