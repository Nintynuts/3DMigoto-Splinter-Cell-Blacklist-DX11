// Room Shadows

cbuffer CB_PS_Shadows : register(b7)
{
	float4 offsets[8] : packoffset(c0);
	float2 shadow_map_res : packoffset(c8);
	float4x4 cScreenToLight : packoffset(c9);
	float4 cShadowFade : packoffset(c13);
	float4 g_vShadowMapDimensions : packoffset(c14);
	float4 g_vCHSData : packoffset(c15);
}

cbuffer CB_PS_ShadowRender : register(b6)
{
	bool bFade : packoffset(c0);
	float4 cClip0 : packoffset(c1);
	float4 cClip1 : packoffset(c2);
	float4 cNoiseSB : packoffset(c3);
	float4 cScale : packoffset(c4);
	float4 cBias : packoffset(c5);
	float4 cVPSB : packoffset(c6);
	float4x4 cMaskScreenToLight : packoffset(c7);
	float4 cSpotLight : packoffset(c11);
}

SamplerState sSceneDepth_s : register(s15);
SamplerComparisonState g_SampleLinearCmp_s : register(s14);
Texture2D<float4> sSceneDepth : register(t0);
Texture2D<float4> g_txLightDepth : register(t14);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float v2 : TEXCOORD1,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2;
	
	
	r0.xy = float2(-0.5,-0.5) + v0.xy;
	r0.xy = r0.xy * cVPSB.xy + cVPSB.zw;
	r0.zw = v1.zw / v2.xx;
	r1.z = sSceneDepth.Sample(sSceneDepth_s, r0.zw).x;
	r1.xy = r1.zz * r0.xy;
	r1.w = 1;
			
	float4 stereo = StereoParams.Load(0);
	r1.x -= stereo.x * (r1.z - stereo.y);
	
	r0.x = dot(r1.xyzw, cScreenToLight._m00_m10_m20_m30);
	r0.y = dot(r1.xyzw, cScreenToLight._m01_m11_m21_m31);
	r0.z = dot(r1.xyzw, cScreenToLight._m02_m12_m22_m32);
	r0.w = dot(r1.xyzw, cScreenToLight._m03_m13_m23_m33);
	r0.xyz = r0.xyz / r0.www;
	r1.xyzw = shadow_map_res.yyyy * float4(-0.5,0,0.5,0) + r0.xyxy;
	r0.w = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r1.xy, r0.z).x;
	r1.x = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r1.zw, r0.z).x;
	r0.w = r1.x + r0.w;
	r1.xyzw = shadow_map_res.yyyy * float4(0,0.5,0,-0.5) + r0.xyxy;
	r1.x = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r1.xy, r0.z).x;
	r1.y = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r1.zw, r0.z).x;
	r0.w = r1.x + r0.w;
	r0.w = r0.w + r1.y;
	r1.xyzw = shadow_map_res.yyyy * float4(-0.5,-0.5,0.5,0.5) + r0.xyxy;
	r1.x = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r1.xy, r0.z).x;
	r1.y = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r1.zw, r0.z).x;
	r0.w = r1.x + r0.w;
	r2.xyzw = shadow_map_res.yyyy * float4(0.5,-0.5,-0.5,0.5) + r0.xyxy;
	r1.x = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r2.xy, r0.z).x;
	r0.z = g_txLightDepth.SampleCmpLevelZero(g_SampleLinearCmp_s, r2.zw, r0.z).x;
	r0.xy = r0.xy * cScale.xy + cBias.xy;
	r0.xy = saturate(abs(r0.xy) * cShadowFade.zz + cShadowFade.ww);
	r0.w = r1.x + r0.w;
	r0.z = r0.w + r0.z;
	r0.z = r0.z + r1.y;
	r0.z = cShadowFade.x * r0.z;
	o0.xyz = r0.zzz * float3(0.125,0.125,0.125) + cShadowFade.yyy;
	r0.x = 1 + -r0.x;
	r0.x = r0.y * -r0.x + r0.x;
	o0.w = bFade ? r0.x : 1;
	return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//	 using 3Dmigoto v1.3.14 on Wed Jan 23 00:17:49 2019
//
//
// Buffer Definitions:
//
// cbuffer CB_PS_Shadows
// {
//
//	 float4 offsets[8];								 // Offset:		0 Size:	 128 [unused]
//	 float2 shadow_map_res;						 // Offset:	128 Size:		 8
//	 float4x4 cScreenToLight;					 // Offset:	144 Size:		64
//	 float4 cShadowFade;								// Offset:	208 Size:		16
//	 float4 g_vShadowMapDimensions;		 // Offset:	224 Size:		16 [unused]
//	 float4 g_vCHSData;								 // Offset:	240 Size:		16 [unused]
//
// }
//
// cbuffer CB_PS_ShadowRender
// {
//
//	 bool bFade;												// Offset:		0 Size:		 4
//	 float4 cClip0;										 // Offset:	 16 Size:		16 [unused]
//	 float4 cClip1;										 // Offset:	 32 Size:		16 [unused]
//	 float4 cNoiseSB;									 // Offset:	 48 Size:		16 [unused]
//	 float4 cScale;										 // Offset:	 64 Size:		16
//	 float4 cBias;											// Offset:	 80 Size:		16
//	 float4 cVPSB;											// Offset:	 96 Size:		16
//	 float4x4 cMaskScreenToLight;			 // Offset:	112 Size:		64 [unused]
//	 float4 cSpotLight;								 // Offset:	176 Size:		16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name																 Type	Format				 Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_SampleLinearCmp							 sampler_c			NA					NA	 14				1
// sSceneDepth											 sampler			NA					NA	 15				1
// sSceneDepth											 texture	float4					2d		0				1
// g_txLightDepth										texture	float4					2d	 14				1
// CB_PS_ShadowRender								cbuffer			NA					NA		6				1
// CB_PS_Shadows										 cbuffer			NA					NA		7				1
//
//
//
// Input signature:
//
// Name								 Index	 Mask Register SysValue	Format	 Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position							0	 xyzw				0			POS	 float	 xy
// TEXCOORD								 0	 xyzw				1		 NONE	 float		 zw
// TEXCOORD								 1	 x					 2		 NONE	 float	 x
//
//
// Output signature:
//
// Name								 Index	 Mask Register SysValue	Format	 Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target								0	 xyzw				0	 TARGET	 float	 xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb7[14], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_sampler s14, mode_comparison
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t14
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.x
dcl_output o0.xyzw
dcl_temps 3
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, cb6[6].xyxx, cb6[6].zwzz
div r0.zw, v1.zzzw, v2.xxxx
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.zwzz, t0.yzxw, s15
mul r1.xy, r0.xyxx, r1.zzzz
mov r1.w, l(1.000000)
dp4 r0.x, r1.xyzw, cb7[9].xyzw
dp4 r0.y, r1.xyzw, cb7[10].xyzw
dp4 r0.w, r1.xyzw, cb7[12].xyzw
dp4 r0.z, r1.xyzw, cb7[11].xyzw
div r0.xyz, r0.xyzx, r0.wwww
mad r1.xyzw, cb7[8].yyyy, l(-0.500000, 0.000000, 0.500000, 0.000000), r0.xyxy
sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t14.xxxx, s14, r0.z
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t14.xxxx, s14, r0.z
add r0.w, r0.w, r1.x
mad r1.xyzw, cb7[8].yyyy, l(0.000000, 0.500000, 0.000000, -0.500000), r0.xyxy
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t14.xxxx, s14, r0.z
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t14.xxxx, s14, r0.z
add r0.w, r0.w, r1.x
add r0.w, r1.y, r0.w
mad r1.xyzw, cb7[8].yyyy, l(-0.500000, -0.500000, 0.500000, 0.500000), r0.xyxy
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t14.xxxx, s14, r0.z
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t14.xxxx, s14, r0.z
add r0.w, r0.w, r1.x
mad r2.xyzw, cb7[8].yyyy, l(0.500000, -0.500000, -0.500000, 0.500000), r0.xyxy
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t14.xxxx, s14, r0.z
sample_c_lz_indexable(texture2d)(float,float,float,float) r0.z, r2.zwzz, t14.xxxx, s14, r0.z
mad r0.xy, r0.xyxx, cb6[4].xyxx, cb6[5].xyxx
mad_sat r0.xy, |r0.xyxx|, cb7[13].zzzz, cb7[13].wwww
add r0.w, r0.w, r1.x
add r0.z, r0.z, r0.w
add r0.z, r1.y, r0.z
mul r0.z, r0.z, cb7[13].x
mad o0.xyz, r0.zzzz, l(0.125000, 0.125000, 0.125000, 0.000000), cb7[13].yyyy
add r0.x, -r0.x, l(1.000000)
mad r0.x, r0.y, -r0.x, r0.x
movc o0.w, cb6[0].x, r0.x, l(1.000000)
ret
// Approximately 38 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
