// GUI - HUD + Images 1

cbuffer CB_VS_Scaleform : register(b7)
{
	float4 mvp[8] : packoffset(c0);
}

cbuffer CB_PerCamera : register(b11)
{
	float4x4 gWorldToProj : packoffset(c0);
	float4x4 gWorldToView : packoffset(c4);
	float4x4 gProjection : packoffset(c8);
	float4 cProjSkinMesh : packoffset(c12);
	float4 gViewViewPos : packoffset(c13);
	float4 gHalfRenderTargetSize : packoffset(c14);
	float4 gVPTexelRes : packoffset(c15);
	float4 gViewportSB : packoffset(c16);
	float4 cViewPos_VS : packoffset(c17);
	float4 cViewPos : packoffset(c18);
	float2 gViewportOffset : packoffset(c19);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "depth_adjust.hlsl"
#include "goal_boundaries.hlsl"

void main(
	int4 v0 : POSITION0,
	uint vID : SV_VertexID,
	out float4 o0 : SV_Position0,
	out float2 o1 : TEXCOORD0)
{
	float4 r0;
		
	r0.xyzw = (int4)v0.xyzw;
	o0.x = dot(r0.xyzw, mvp[0].xyzw);
	o0.y = dot(r0.xyzw, mvp[1].xyzw);
	o0.zw = r0.zw;
	o1.x = dot(r0.xyzw, mvp[6].xyzw);
	o1.y = dot(r0.xyzw, mvp[7].xyzw);
	
	float4 resolution = IniParams.Load(int2(0,0));
	if (resolution.x != resolution.z) // Render Target
		return;

	float4 stereo = StereoParams.Load(0);
	float4 tex_filter = IniParams.Load(int2(2,0));
		
	if (tex_filter.x <= -2)
	{
		o0.x += GoalData[0].elementDepthCache[0] * (stereo.x > 0 ? 1 : -1);
	}
	else if (tex_filter.x > -1)
	{	
		float layer = 4;
	
		if (o0.x == 0 || o0.x == 1 || o0.y == 0 || o0.y == 1)
			layer = 1; // Background Map
		else if (tex_filter.x > 0)
			layer = tex_filter.x;
		o0.x -= stereo.x * (tex_filter.z * layer - tex_filter.z*5)/500;
	}
	
	return;
}