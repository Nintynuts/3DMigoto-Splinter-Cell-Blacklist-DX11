// Mesh - Wall decorations
#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"

cbuffer CB_PS_FullDeferredMaterial_Static : register(b7)
{
  float4 cDeferredMaterialProps : packoffset(c0);
  float4 cDiffCol : packoffset(c1);
  float4 cSpecCol : packoffset(c2);
  float4 cEnvCol : packoffset(c3);
  float4 cDBlendCol : packoffset(c4);
  float4 data0 : packoffset(c5);
  float4 data1 : packoffset(c6);
  float4 cDx11Padding : packoffset(c7);
  bool bEnvPass : packoffset(c8.x);
  bool bFresnel : packoffset(c8.y);
}
#include "CB/PerCubeMapRenderCell.hlsl"
#include "texture.hlsl"
TEXTURE(_2D,sDiffuseMap,0,0);
TEXTURE(_2D,sNormalMap,1,1);
TEXTURE(_2D,sSpecularMap,2,2);
TEXTURE(_2D,sSelfAOMap,12,3);

#include "3Dmigoto.hlsl"


void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1;
  
  // Clip geometry close to the camera as it may only be in one eye
  if (v0.w < convergence * separation * 1.2)
    discard;

  r0.x = SAMPLE(sSelfAOMap, v1.zw).x;
  r0.y = r0.x * r0.x - 1;
  r0.y = gAOControl * r0.y + 1;
  o0.y = r0.x * r0.y;
  o0.x = v2.w;
  o0.zw = 0;
  r0.xy = SAMPLE(sNormalMap, v1.xy).xy;
  r0.xy = r0.xy * 2 - 1;
  r1.xyz = v4.xyz * r0.y;
  r1.xyz = r0.x * v3.xyz + r1.xyz;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = min(1, r0.x);
  r0.x = 1 - r0.x;
  r0.x = sqrt(r0.x);
  r0.xyz = r0.x * v5.xyz + r1.xyz;
  r0.w = sq_mag(r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.w;
  o1.xyz = r0.xyz * 0.5 + 0.5;
  r0.w = 1 - data0.w;
  r1.xyz = SAMPLE(sSpecularMap, v1.xy).xyz;
  r0.w = r1.z * r0.w + data0.w;
  r0.w = r1.z * r0.w;
  r0.w = data0.x * r0.w;
  r0.w = log2(r0.w);
  r0.w = r0.w * r1.x;
  r1.x = data0.y * r1.y;
  o1.w = saturate(0.0909090936 * r0.w);
  r1.yzw = cViewPos.xyz - v2.xyz;
  r0.w = sq_mag(r1.yzw);
  r0.w = rsqrt(r0.w);
  r1.yzw = r1.yzw * r0.w;
  r0.x = dot(r0.xyz, r1.yzw);
  r0.x = saturate(1 - r0.x);
  r0.x = log2(r0.x);
  r0.x = data1.w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = -1 + r0.x;
  r0.x = data1.z * r0.x + 1;
  r0.x = r1.x * r0.x;
  r0.x = 0.375 * r0.x;
  r0.x = sqrt(r0.x);
  o2.w = min(1, r0.x);
  r0.xyz = SAMPLE(sDiffuseMap, v1.xy).xyz;
  r0.xyz = r0.xyz * r0.xyz;
  r0.xyz = cDiffCol.xyz * r0.xyz;
  o2.xyz = sqrt(r0.xyz);
  r0.xyz = v6.xyz * r0.xyz;
  r0.xyz = gCubemapScale.y * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = max(9.99999975e-005, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r0.w = min(1, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = 0.00392156886 * r0.w;
  r0.xyz = r0.xyz / r0.w;
  o3.w = r0.w;
  o3.xyz = min(1, r0.xyz);
  return;
}