// GUI - Decorations Batched (Crosshair)

cbuffer CB_VS_ScaleformBatched : register(b7)
{
	float4 mvp[192] : packoffset(c0);
}

cbuffer CB_PerCamera : register(b11)
{
	float4x4 gWorldToProj : packoffset(c0);
	float4x4 gWorldToView : packoffset(c4);
	float4x4 gProjection : packoffset(c8);
	float4 cProjSkinMesh : packoffset(c12);
	float4 gViewViewPos : packoffset(c13);
	float4 gHalfRenderTargetSize : packoffset(c14);
	float4 gVPTexelRes : packoffset(c15);
	float4 gViewportSB : packoffset(c16);
	float4 cViewPos_VS : packoffset(c17);
	float4 cViewPos : packoffset(c18);
	float2 gViewportOffset : packoffset(c19);
}

struct Vertex2D_RGB 
{
	half2 pos;
	uint colour; // R8G8B8A8
};

StructuredBuffer<Vertex2D_RGB> VertexBuffer : register(t13);

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "depth_adjust.hlsl" 

void main(
	int4 v0 : POSITION0,
	float4 v1 : COLOR0,
	uint vID : SV_VertexID,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD0,
	out float4 o2 : TEXCOORD1,
	out float4 o3 : TEXCOORD2)
{
	float4 r0,r1,r2;
	
	r0.x = 2040.01001 * v1.x;
	r0.x = (int)r0.x;
	r1.xyzw = (int4)v0.xyzw;
	o0.x = dot(r1.xyzw, mvp[r0.x + 0].xyzw);
	o0.y = dot(r1.xyzw, mvp[r0.x + 1].xyzw);
	o0.zw = r1.zw;
	o1.x = dot(r1.xyzw, mvp[r0.x + 6].xyzw);
	o1.y = dot(r1.xyzw, mvp[r0.x + 7].xyzw);
	o2.xyzw = mvp[r0.x + 5].xyzw;
	o3.xyzw = mvp[r0.x + 4].xyzw;
	
	float4 resolution = IniParams.Load(int2(0,0));
	if (resolution.x != resolution.z) // Render Target
		return;
	
	float4 stereo = StereoParams.Load(0);
	float4 tex_filter = IniParams.Load(int2(2,0));
		
	if (tex_filter.x <= -1)
	{
		float4 centre = float4(0,0.2,0,1);
		if (tex_filter.x <= -2)
		{
			float4 vec1, vec2;
			uint quad = floor(vID / 6) * 6;
	
			vec1.xy = VertexBuffer[quad+0].pos;
			vec2.xy = VertexBuffer[quad+2].pos;
			centre.zw = vec1.zw = vec2.zw = float2(0,1);
			centre.x = dot(centre.xyzw, mvp[0].xyzw);
			centre.y = dot(centre.xyzw, mvp[1].xyzw);
			centre.xy = (vec1.xy + vec2.xy)/2;
			if (tex_filter.x == -3)
				centre.y -= 0.1;
		}
		o0.x += adjust_from_depth_buffer(centre.x,centre.y);
	}
	else if (tex_filter.x > 0)
		o0.x -= stereo.x * (tex_filter.z * tex_filter.x - tex_filter.z*5)/500;
	
	return;
}