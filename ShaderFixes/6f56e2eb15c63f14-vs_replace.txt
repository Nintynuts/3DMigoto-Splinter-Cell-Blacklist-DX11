// GUI - Text

cbuffer CB_VS_Scaleform : register(b7)
{
	float4 mvp[8] : packoffset(c0);
}

cbuffer CB_PerCamera : register(b11)
{
	float4x4 gWorldToProj : packoffset(c0);
	float4x4 gWorldToView : packoffset(c4);
	float4x4 gProjection : packoffset(c8);
	float4 cProjSkinMesh : packoffset(c12);
	float4 gViewViewPos : packoffset(c13);
	float4 gHalfRenderTargetSize : packoffset(c14);
	float4 gVPTexelRes : packoffset(c15);
	float4 gViewportSB : packoffset(c16);
	float4 cViewPos_VS : packoffset(c17);
	float4 cViewPos : packoffset(c18);
	float2 gViewportOffset : packoffset(c19);
}

struct Vertex2D_RGB_UV 
{
	float2 pos;
	uint colour1; // R8G8B8A8
	float2 uv;
};

StructuredBuffer<Vertex2D_RGB_UV> VertexBuffer : register(t13);

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "depth_adjust.hlsl"

void main(
	float4 v0 : POSITION0,
	float2 v1 : TEXCOORD0,
	float4 v2 : COLOR0,
	uint vID : SV_VertexID,
	out float4 o0 : SV_Position0,
	out float2 o1 : TEXCOORD0,
	out float4 o2 : COLOR0)
{
	o0.x = dot(v0.xyzw, mvp[0].xyzw);
	o0.y = dot(v0.xyzw, mvp[1].xyzw);
	o0.zw = v0.zw;
	o1.xy = v1.xy;
	o2.xyzw = v2.zyxw;
		
	float4 resolution = IniParams.Load(int2(0,0));
	if (resolution.x != resolution.z) // Render Target
		return;
	
	float4 stereo = StereoParams.Load(0);
	float4 tex_filter = IniParams.Load(int2(2,0));
	
	if (!tex_filter.w)//  && o2.x < 0.75) // Not in menu
	{
		uint quad = floor(vID / 6) * 6;	
		float4 centre, vec1, vec2;
		vec1.xy = VertexBuffer[quad+0].pos;
		vec2.xy = VertexBuffer[quad+2].pos;
		centre.zw = vec1.zw = vec2.zw = float2(0,1);
	
		float height = -vec2.y * mvp[1].y;
	
		//if (height < 0.056 && height > 0.045)
		{
			centre.xy = (vec1.xy + vec2.xy)/2;
			centre.x = dot(centre.xyzw, mvp[0].xyzw);
			centre.y = dot(centre.xyzw, mvp[1].xyzw);
			o0.x += adjust_from_depth_buffer(centre.x,centre.y) - stereo.x * 0.05;
		}
	}
	
	return;
}