// GUI - Block Colour Batched

cbuffer CB_VS_ScaleformBatched : register(b7)
{
	float4 mvp[192] : packoffset(c0);
}

cbuffer CB_PerCamera : register(b11)
{
	float4x4 gWorldToProj : packoffset(c0);
	float4x4 gWorldToView : packoffset(c4);
	float4x4 gProjection : packoffset(c8);
	float4 cProjSkinMesh : packoffset(c12);
	float4 gViewViewPos : packoffset(c13);
	float4 gHalfRenderTargetSize : packoffset(c14);
	float4 gVPTexelRes : packoffset(c15);
	float4 gViewportSB : packoffset(c16);
	float4 cViewPos_VS : packoffset(c17);
	float4 cViewPos : packoffset(c18);
	float2 gViewportOffset : packoffset(c19);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "depth_adjust.hlsl" 

void main(
	int4 v0 : POSITION0,
	float4 v1 : COLOR0,
	float4 v2 : COLOR1,
	out float4 o0 : SV_Position0,
	out float4 o1 : COLOR0,
	out float4 o2 : COLOR1,
	out float4 o3 : TEXCOORD1,
	out float4 o4 : TEXCOORD2)
{
	float4 r0,r1;
	
	r0.x = 2040.01001 * v2.x;
	r0.x = (int)r0.x;
	r1.xyzw = (int4)v0.xyzw;
	o0.x = dot(r1.xyzw, mvp[r0.x].xyzw);
	r0.xyz = (int3)r0.xxx + int3(1,4,5);
	o0.y = dot(r1.xyzw, mvp[r0.x].xyzw);
	o0.zw = r1.zw;
	o1.xyzw = v1.zyxw;
	o2.xyzw = v2.zyxw;
	o3.xyzw = mvp[r0.z].xyzw;
	o4.xyzw = mvp[r0.y].xyzw;
	
	float4 resolution = IniParams.Load(int2(0,0));
	if (resolution.x != resolution.z) // Render Target
		return;
	
	float4 stereo = StereoParams.Load(0);
	float4 tex_filter = IniParams.Load(int2(2, 0));
	
	if (!tex_filter.w)
		o0.x += adjust_from_depth_buffer(0.0, 0.2);
	else
	{	
		float layer = 2;
	
		if (o0.x > -0.3 && o0.x < 0.3 && o0.y < 0.2)
			layer = 4;
		if (o0.y < -0.7) // ShadowNet Back
			layer = 5;
	
		o0.x -= stereo.x * (tex_filter.z * layer - tex_filter.z * 5) / 500;
	}
	
	return;
}