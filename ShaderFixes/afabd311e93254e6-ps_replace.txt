// Puddle (Cubemap + Displacement)

#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"
#include "CB/PerObject.hlsl"
#include "CB/PerFogControl.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"
#define LIGHT_REG b2
#include "CB/PS_PerLightBatch.hlsl"
#include "texture.hlsl"
#include "3Dmigoto.hlsl"

cbuffer CB_PS_CameraFade : register(b1)
{
  bool bPerPixelFade : packoffset(c0.x);
  float4 gCstFadeValue : packoffset(c1);
  float4 cAvgShadow : packoffset(c2);
}

cbuffer CB_PS_BasicMaterial_Static : register(b7)
{
  float4 data0 : packoffset(c0);
  float4 data1 : packoffset(c1);
  float4 cDx11Padding1 : packoffset(c2);
  float4 cDiffCol : packoffset(c3);
  float4 cSpecCol : packoffset(c4);
  float4 cEnvCol : packoffset(c5);
  float4 cDx11Padding2 : packoffset(c6);
  bool bEnvGammaControl : packoffset(c7.x);
  bool bEnvPass : packoffset(c7.y);
  bool bFresnel : packoffset(c7.z);
  float cAlphaTest : packoffset(c7.w);
}

TEXTURE(_2D,sDiffuseMap,0,9);
TEXTURE(_2D,sNormalMap,1,3);
TEXTURE(_2D,sSpecularMap,2,2);
TEXTURE(_2D,sDisplacementMap,4,0);
TEXTURE(_2D,sSpotTex0,6,6);
TEXTURE(_2D,sSpotTex1,7,7);
TEXTURE(_2D,sSpotTex2,8,8);
TEXTURE(_Cube,sEnvMap,9,10);
TEXTURE(_2D,sSelfAOMap,12,5);
TEXTURE(_2D,sDepthMap,13,1);
TEXTURE(_2D,sShadowSamples,15,4);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = cViewPosStereo() - v2.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r0.xyz * r0.w;
  r2.x = dot(v3.xyz, r1.xyz);
  r2.y = dot(v4.xyz, r1.xyz);
  r1.w = r2.y / r2.x;
  r3.yw = float2(-0.25,0.25);
  r3.xz = data0.z;
  r4 = r3.yxwz * -r2.xyxy;
  r3 = r4 * r3 + v1.xyxy;
  r2.z = SAMPLE(sDisplacementMap, r3.xy).x;
  r5.y = 0.5 - r2.z;
  r2.z = cmp(-0.25 >= r5.y);
  r2.w = r2.x / 3;
  r5.w = r2.w / -r2.y;
  r5.x = r4.x / -r2.y;
  r5.z = 0;
  r6 = r2.z ? r5.wzxy : 0;
  r2.z = SAMPLE(sDisplacementMap, v1.xy).x;
  r5.w = 0.5 - r2.z;
  r2.z = cmp(0 >= r5.w);
  r6 = r2.z ? r5 : r6;
  r2.z = SAMPLE(sDisplacementMap, r3.zw).x;
  r5.y = 0.5 - r2.z;
  r2.z = cmp(0.25 >= r5.y);
  r5.x = r4.z / -r2.y;
  r3 = r2.z ? r5.zwxy : r6;
  r4.y = 0.5;
  r4.x = data0.z;
  r2.zw = r4.yx * -r2.xy;
  r4.xy = r2.zw * r4.xy + v1.xy;
  r2.w = SAMPLE(sDisplacementMap, r4.xy).x;
  r5.w = 0.5 - r2.w;
  r2.w = cmp(0.5 >= r5.w);
  r5.z = r2.z / -r2.y;
  r3 = r2.w ? r5 : r3;
  r2.zw = r3.wz - r3.yx;
  r2.z = r2.z / r2.w;
  r2.w = -r2.z * r3.z + r3.w;
  r2.z = -r2.z + r1.w;
  r4.w = r2.w / r2.z;
  r2.z = r4.w * r1.w;
  r5.xy = -r2.xy * r2.z;
  r5.xy = r5.xy * data0.z + v1.xy;
  r2.w = SAMPLE(sDisplacementMap, r5.xy).x;
  r4.x = 0.5 - r2.w;
  r2.w = cmp(r4.x < r2.z);
  r4.yz = r3.xy;
  r3.xy = r4.wx;
  r3 = r2.w ? r4.yzwx : r3;
  r2.w = -r1.w * r4.w + r4.x;
  r2.w = cmp(0.01 < abs(r2.w));
  r5.xy = r3.wz - r3.yx;
  r5.x = r5.x / r5.y;
  r5.y = -r5.x * r3.z + r3.w;
  r5.x = -r5.x + r1.w;
  r4.w = r5.y / r5.x;
  r5.x = r4.w * r1.w;
  r5.yz = r5.x * -r2.xy;
  r5.yz = r5.yz * data0.z + v1.xy;
  r5.y = SAMPLE(sDisplacementMap, r5.yz).x;
  if (r2.w != 0) {
    r4.x = 0.5 - r5.y;
    r5.y = cmp(r4.x < r5.x);
    r4.yz = r3.xy;
    r3.xy = r4.wx;
    r3 = r5.y ? r4.yzwx : r3;
    r6.xy = r3.xy;
    r3.xw = r3.zw;
    r2.z = r5.x;
    r3.z = r4.x;
  } else {
    r6.xy = r3.xy;
    r3.xw = r3.zw;
    r3.z = r4.x;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r4.y = r4.x - r2.z;
  r4.y = cmp(0.01 < abs(r4.y));
  r2.w = r2.w ? r4.y : 0;
  r4.yz = r3.wx - r6.yx;
  r4.y = r4.y / r4.z;
  r4.z = -r4.y * r3.x + r3.w;
  r4.y = -r4.y + r1.w;
  r6.z = r4.z / r4.y;
  r4.y = r6.z * r1.w;
  r4.zw = r4.y * -r2.xy;
  r4.zw = r4.zw * data0.z + v1.xy;
  r4.z = SAMPLE(sDisplacementMap, r4.zw).x;
  if (r2.w != 0) {
    r6.w = 0.5 - r4.z;
    r4.z = cmp(r6.w < r4.y);
    r3.yz = r6.zw;
    r6 = r4.z ? r6 : r3.yzxw;
    r4.x = r3.z;
    r2.z = r4.y;
    r3.xw = r6.zw;
  }
  r2.z = r4.x - r2.z;
  r2.z = cmp(0.01 < abs(r2.z));
  r2.z = r2.z ? r2.w : 0;
  r2.w = r3.w - r6.y;
  r3.y = r3.x - r6.x;
  r2.w = r2.w / r3.y;
  r3.x = -r2.w * r3.x + r3.w;
  r2.w = -r2.w + r1.w;
  r2.w = r3.x / r2.w;
  r1.w = r2.w * r1.w;
  r3.xy = -r2.xy * r1.w;
  r3.xy = r3.xy * data0.z + v1.xy;
  r1.w = SAMPLE(sDisplacementMap, r3.xy).x;
  if (r2.z != 0) {
    r3.z = 0.5 - r1.w;
  }
  r1.w = data0.z * r3.z;
  r2.xy = r1.w * -r2.xy + v1.xy;
  r2.zw = gVPTexelRes.zw / 3;
  r2.zw = v0.xy * gVPTexelRes.zw + r2.zw;
  r3.xy = SAMPLE(sDepthMap, r2.zw).xy;
  r3.zw = gVPTexelRes.xy * float2(-1,0) + r2.zw;
  r3.zw = SAMPLE(sDepthMap, r3.zw).xy;
  r4 = gVPTexelRes.xyxy * float4(0,-1,1,0) + r2.zwzw;
  r4.xy = SAMPLE(sDepthMap, r4.xy).xy;
  r4.zw = SAMPLE(sDepthMap, r4.zw).xy;
  r5.xy = gVPTexelRes.xy * float2(0,1) + r2.zw;
  r5.xy = SAMPLE(sDepthMap, r5.xy).xy;
  r1.w = -v6.w + r3.x;
  r3.x = cmp(abs(r1.w) < 100000);
  r3.yw = -cAOID + r3.yw;
  r3.yw = cmp(abs(r3.yw) < 5e-8);
  r3.x = r3.y ? r3.x : 0;
  r6.x = r3.x ? abs(r1.w) : 100000;
  r1.w = -v6.w + r3.z;
  r3.x = abs(r1.w);
  r1.w = cmp(r3.x < r6.x);
  r1.w = r3.w ? r1.w : 0;
  r3.yz = float2(-1,0);
  r6.yz = 0;
  r3.xyz = r1.w ? r3.xyz : r6.xyz;
  r1.w = -v6.w + r4.x;
  r6.x = abs(r1.w);
  r1.w = cmp(r6.x < r3.x);
  r3.w = -cAOID + r4.y;
  r3.w = cmp(abs(r3.w) < 5e-8);
  r1.w = r1.w ? r3.w : 0;
  r6.yz = float2(0,-1);
  r3.xyz = r1.w ? r6.xyz : r3.xyz;
  r1.w = -v6.w + r4.z;
  r4.x = abs(r1.w);
  r1.w = cmp(r4.x < r3.x);
  r3.w = -cAOID + r4.w;
  r3.w = cmp(abs(r3.w) < 5e-8);
  r1.w = r1.w ? r3.w : 0;
  r4.yz = float2(1,0);
  r3.xyz = r1.w ? r4.xyz : r3.xyz;
  r1.w = -v6.w + r5.x;
  r1.w = cmp(abs(r1.w) < r3.x);
  r3.x = -cAOID + r5.y;
  r3.x = cmp(abs(r3.x) < 5e-8);
  r1.w = r1.w ? r3.x : 0;
  r3.xy = r1.w ? float2(0,1) : r3.yz;
  r2.zw = r3.xy * gVPTexelRes.xy + r2.zw;
  r3.xyz = SAMPLE(sSpecularMap, r2.xy).xyz;
  r4.xy = SAMPLE(sNormalMap, r2.xy).xy;
  r4.xy = r4.xy * 2 - 1;
  r1.w = dot(r4.xy, r4.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 - r1.w;
  r1.w = sqrt(r1.w);
  r4.yzw = v4.xyz * r4.y;
  r4.xyz = r4.x * v3.xyz + r4.yzw;
  r4.xyz = r1.w * v5.xyz + r4.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.w;
  r5.xy = data0.xy * r3.xy;
  r1.w = r3.x * data0.x + 1e-4;
  r3.x = 0.01 * r1.w;
  r1.w = -r1.w * 0.01 + 1;
  r1.w = r3.z * r1.w + r3.x;
  r1.w = r3.z / r1.w;
  r1.w = r5.x * r1.w;
  r3.x = 1 - gCstFadeValue.y;
  r6.xyz = SAMPLE(sShadowSamples, r2.zw).xyz;
  r7.xyz = cAvgShadow.x - r6.xyz;
  r6.xyz = r3.x * r7.xyz + r6.xyz;
  r2.z = SAMPLE(sSelfAOMap, v1.zw).x;
  r2.w = r2.z * r2.z;
  r2.w = r2.z * r2.w - r2.z;
  r2.z = gAOControl * r2.w + r2.z;
  r3.xzw = cOmni0.pos.xyz - v2.xyz;
  r2.w = dot(r3.xzw, r3.xzw);
  r2.w = rsqrt(r2.w);
  r7.xyz = r3.xzw * r2.w;
  r4.w = dot(r3.xzw, r7.xyz);
  r5.x = cmp(r4.w < cOmni0.pos.w);
  r8.xy = saturate(r4.w * cOmni0.atten.xy + cOmni0.atten.zw);
  r8.xy = -r8.xy * r8.xy + 1;
  r8.xy = r8.xy * r8.xy;
  r6.w = 1;
  r4.w = dot(cOmni0.mask, r6);
  r8.xy = r8.xy * r4.w;
  r4.w = saturate(dot(r4.xyz, r7.xyz));
  r7.xy = r4.w * r8.xy;
  r7.xzw = cOmni0.dCol.xyz * r7.x;
  r1.w = max(1e-5, r1.w);
  r3.xzw = r3.xzw * r2.w + r1.xyz;
  r2.w = dot(r3.xzw, r3.xzw);
  r2.w = rsqrt(r2.w);
  r3.xzw = r3.xzw * r2.w;
  r2.w = saturate(dot(r3.xzw, r4.xyz));
  r2.w = log2(r2.w);
  r2.w = r2.w * r1.w;
  r2.w = exp2(r2.w);
  r3.x = 2 + r1.w;
  r3.x = r3.x / 3;
  r2.w = r3.x * r2.w;
  r2.w = r2.w * r7.y;
  r8.xyz = cOmni0.sCol.xyz * r2.w;
  r7.xyz = r5.x ? r7.xzw : 0;
  r8.xyz = r5.x ? r8.xyz : 0;
  r7.xyz = bOmni0 ? r7.xyz : 0;
  r8.xyz = bOmni0 ? r8.xyz : 0;
  r9.xyz = cOmni1.pos.xyz - v2.xyz;
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = rsqrt(r2.w);
  r10.xyz = r9.xyz * r2.w;
  r3.z = dot(r9.xyz, r10.xyz);
  r3.w = cmp(r3.z < cOmni1.pos.w);
  r5.xw = saturate(r3.z * cOmni1.atten.xy + cOmni1.atten.zw);
  r5.xw = -r5.xw * r5.xw + 1;
  r5.xw = r5.xw * r5.xw;
  r3.z = dot(cOmni1.mask, r6);
  r5.xw = r5.xw * r3.z;
  r3.z = saturate(dot(r4.xyz, r10.xyz));
  r5.xw = r3.z * r5.xw;
  r10.xyz = r5.x * cOmni1.dCol.xyz + r7.xyz;
  r9.xyz = r9.xyz * r2.w + r1.xyz;
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = rsqrt(r2.w);
  r9.xyz = r9.xyz * r2.w;
  r2.w = saturate(dot(r9.xyz, r4.xyz));
  r2.w = log2(r2.w);
  r2.w = r2.w * r1.w;
  r2.w = exp2(r2.w);
  r2.w = r2.w * r3.x;
  r2.w = r2.w * r5.w;
  r9.xyz = r2.w * cOmni1.sCol.xyz + r8.xyz;
  r10.xyz = r3.w ? r10.xyz : r7.xyz;
  r9.xyz = r3.w ? r9.xyz : r8.xyz;
  r7.xyz = bOmni0 ? r10.xyz : r7.xyz;
  r8.xyz = bOmni0 ? r9.xyz : r8.xyz;
  r9.xyz = cOmni2.pos.xyz - v2.xyz;
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = rsqrt(r2.w);
  r10.xyz = r9.xyz * r2.w;
  r3.z = dot(r9.xyz, r10.xyz);
  r3.w = cmp(r3.z < cOmni2.pos.w);
  r5.xw = saturate(r3.z * cOmni2.atten.xy + cOmni2.atten.zw);
  r5.xw = -r5.xw * r5.xw + 1;
  r5.xw = r5.xw * r5.xw;
  r3.z = dot(cOmni2.mask, r6);
  r5.xw = r5.xw * r3.z;
  r3.z = saturate(dot(r4.xyz, r10.xyz));
  r5.xw = r3.z * r5.xw;
  r10.xyz = r5.x * cOmni2.dCol.xyz + r7.xyz;
  r9.xyz = r9.xyz * r2.w + r1.xyz;
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = rsqrt(r2.w);
  r9.xyz = r9.xyz * r2.w;
  r2.w = saturate(dot(r9.xyz, r4.xyz));
  r2.w = log2(r2.w);
  r2.w = r2.w * r1.w;
  r2.w = exp2(r2.w);
  r2.w = r2.w * r3.x;
  r2.w = r2.w * r5.w;
  r9.xyz = r2.w * cOmni2.sCol.xyz + r8.xyz;
  r10.xyz = r3.w ? r10.xyz : r7.xyz;
  r9.xyz = r3.w ? r9.xyz : r8.xyz;
  r7.xyz = bOmni0 ? r10.xyz : r7.xyz;
  r8.xyz = bOmni0 ? r9.xyz : r8.xyz;
  r9.xyz = cOmni3.pos.xyz - v2.xyz;
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = rsqrt(r2.w);
  r10.xyz = r9.xyz * r2.w;
  r3.z = dot(r9.xyz, r10.xyz);
  r3.w = cmp(r3.z < cOmni3.pos.w);
  r5.xw = saturate(r3.z * cOmni3.atten.xy + cOmni3.atten.zw);
  r5.xw = -r5.xw * r5.xw + 1;
  r5.xw = r5.xw * r5.xw;
  r3.z = dot(cOmni3.mask, r6);
  r5.xw = r5.xw * r3.z;
  r3.z = saturate(dot(r4.xyz, r10.xyz));
  r5.xw = r3.z * r5.xw;
  r10.xyz = r5.x * cOmni3.dCol.xyz + r7.xyz;
  r9.xyz = r9.xyz * r2.w + r1.xyz;
  r2.w = dot(r9.xyz, r9.xyz);
  r2.w = rsqrt(r2.w);
  r9.xyz = r9.xyz * r2.w;
  r2.w = saturate(dot(r9.xyz, r4.xyz));
  r2.w = log2(r2.w);
  r2.w = r2.w * r1.w;
  r2.w = exp2(r2.w);
  r2.w = r2.w * r3.x;
  r2.w = r2.w * r5.w;
  r9.xyz = r2.w * cOmni3.sCol.xyz + r8.xyz;
  r10.xyz = r3.w ? r10.xyz : r7.xyz;
  r9.xyz = r3.w ? r9.xyz : r8.xyz;
  r7.xyz = bOmni3 ? r10.xyz : r7.xyz;
  r8.xyz = bOmni3 ? r9.xyz : r8.xyz;
  if (bSpot0 != 0) {
    r9.x = dot(v2, cSpot0.proj._m00_m10_m20_m30);
    r9.y = dot(v2, cSpot0.proj._m01_m11_m21_m31);
    r2.w = dot(v2, cSpot0.proj._m02_m12_m22_m32);
    r3.z = dot(v2, cSpot0.proj._m03_m13_m23_m33);
    r2.w = cmp(abs(r2.w) < 1);
    r3.zw = r9.xy / r3.z;
    r9.xyz = SAMPLE(sSpotTex0, r3.zw).xyz;
    if (r2.w != 0) {
      r10.xyz = cSpot0.pos.xyz - v2.xyz;
      r2.w = dot(r10.xyz, r10.xyz);
      r2.w = rsqrt(r2.w);
      r11.xyz = r10.xyz * r2.w;
      r3.z = dot(r10.xyz, r11.xyz);
      r3.z = saturate(r3.z * cSpot0.atten.x + cSpot0.atten.y);
      r3.z = -r3.z * r3.z + 1;
      r9.xyz = r9.xyz * r3.z;
      r9.xyz = r9.xyz * r9.xyz;
      r3.z = dot(cSpot0.mask, r6);
      r9.xyz = r9.xyz * r3.z;
      r3.z = saturate(dot(r4.xyz, r11.xyz));
      r9.xyz = r3.z * r9.xyz;
      r7.xyz = r9.xyz * cSpot0.dCol.xyz + r7.xyz;
      r10.xyz = r10.xyz * r2.w + r1.xyz;
      r2.w = dot(r10.xyz, r10.xyz);
      r2.w = rsqrt(r2.w);
      r10.xyz = r10.xyz * r2.w;
      r2.w = saturate(dot(r10.xyz, r4.xyz));
      r2.w = log2(r2.w);
      r2.w = r2.w * r1.w;
      r2.w = exp2(r2.w);
      r2.w = r2.w * r3.x;
      r9.xyz = r2.w * r9.xyz;
      r8.xyz = r9.xyz * cSpot0.sCol.xyz + r8.xyz;
    }
  }
  if (bSpot1 != 0) {
    r9.x = dot(v2, cSpot1.proj._m00_m10_m20_m30);
    r9.y = dot(v2, cSpot1.proj._m01_m11_m21_m31);
    r2.w = dot(v2, cSpot1.proj._m02_m12_m22_m32);
    r3.z = dot(v2, cSpot1.proj._m03_m13_m23_m33);
    r2.w = cmp(abs(r2.w) < 1);
    r3.zw = r9.xy / r3.z;
    r9.xyz = SAMPLE(sSpotTex1, r3.zw).xyz;
    if (r2.w != 0) {
      r10.xyz = cSpot1.pos.xyz - v2.xyz;
      r2.w = dot(r10.xyz, r10.xyz);
      r2.w = rsqrt(r2.w);
      r11.xyz = r10.xyz * r2.w;
      r3.z = dot(r10.xyz, r11.xyz);
      r3.z = saturate(r3.z * cSpot1.atten.x + cSpot1.atten.y);
      r3.z = -r3.z * r3.z + 1;
      r9.xyz = r9.xyz * r3.z;
      r9.xyz = r9.xyz * r9.xyz;
      r3.z = dot(cSpot1.mask, r6);
      r9.xyz = r9.xyz * r3.z;
      r3.z = saturate(dot(r4.xyz, r11.xyz));
      r9.xyz = r3.z * r9.xyz;
      r7.xyz = r9.xyz * cSpot1.dCol.xyz + r7.xyz;
      r10.xyz = r10.xyz * r2.w + r1.xyz;
      r2.w = dot(r10.xyz, r10.xyz);
      r2.w = rsqrt(r2.w);
      r10.xyz = r10.xyz * r2.w;
      r2.w = saturate(dot(r10.xyz, r4.xyz));
      r2.w = log2(r2.w);
      r2.w = r2.w * r1.w;
      r2.w = exp2(r2.w);
      r2.w = r2.w * r3.x;
      r9.xyz = r2.w * r9.xyz;
      r8.xyz = r9.xyz * cSpot1.sCol.xyz + r8.xyz;
    }
  }
  if (bSpot2 != 0) {
    r9.x = dot(v2, cSpot2.proj._m00_m10_m20_m30);
    r9.y = dot(v2, cSpot2.proj._m01_m11_m21_m31);
    r2.w = dot(v2, cSpot2.proj._m02_m12_m22_m32);
    r3.z = dot(v2, cSpot2.proj._m03_m13_m23_m33);
    r2.w = cmp(abs(r2.w) < 1);
    r3.zw = r9.xy / r3.z;
    r9.xyz = SAMPLE(sSpotTex2, r3.zw).xyz;
    if (r2.w != 0) {
      r10.xyz = cSpot2.pos.xyz - v2.xyz;
      r2.w = dot(r10.xyz, r10.xyz);
      r2.w = rsqrt(r2.w);
      r11.xyz = r10.xyz * r2.w;
      r3.z = dot(r10.xyz, r11.xyz);
      r3.z = saturate(r3.z * cSpot2.atten.x + cSpot2.atten.y);
      r3.z = -r3.z * r3.z + 1;
      r9.xyz = r9.xyz * r3.z;
      r9.xyz = r9.xyz * r9.xyz;
      r3.z = dot(cSpot2.mask, r6);
      r9.xyz = r9.xyz * r3.z;
      r3.z = saturate(dot(r4.xyz, r11.xyz));
      r9.xyz = r3.z * r9.xyz;
      r7.xyz = r9.xyz * cSpot2.dCol.xyz + r7.xyz;
      r10.xyz = r10.xyz * r2.w + r1.xyz;
      r2.w = dot(r10.xyz, r10.xyz);
      r2.w = rsqrt(r2.w);
      r10.xyz = r10.xyz * r2.w;
      r2.w = saturate(dot(r10.xyz, r4.xyz));
      r2.w = log2(r2.w);
      r2.w = r2.w * r1.w;
      r2.w = exp2(r2.w);
      r2.w = r2.w * r3.x;
      r9.xyz = r2.w * r9.xyz;
      r8.xyz = r9.xyz * cSpot2.sCol.xyz + r8.xyz;
    }
  }
  r2.w = dot(cDir0.mask, r6);
  r3.z = saturate(dot(r4.xyz, cDir0.dir.xyz));
  r2.w = r3.z * r2.w;
  r6.xyz = r2.w * cDir0.dCol.xyz + r7.xyz;
  r0.xyz = r0.xyz * r0.w + cDir0.dir.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.w;
  r0.x = saturate(dot(r0.xyz, r4.xyz));
  r0.x = log2(r0.x);
  r0.x = r1.w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r3.x;
  r0.x = r0.x * r2.w;
  r0.xyz = r0.x * cDir0.sCol.xyz + r8.xyz;
  r3.xzw = bDir0 ? r6.xyz : r7.xyz;
  r0.xyz = bDir0 ? r0.xyz : r8.xyz;
  r6 = SAMPLE(sDiffuseMap, r2.xy);
  r2.xyw = r6.xyz * r6.xyz;
  r0.w = dot(r4.xyz, r1.xyz);
  r1.w = saturate(1 - r0.w);
  r1.w = log2(r1.w);
  r1.w = data1.w * r1.w;
  r1.w = exp2(r1.w);
  r1.w = -1 + r1.w;
  r6.y = data1.z * r1.w + 1;
  r6.x = r6.y * r5.y;
  r5.z = 1;
  r5.xy = bFresnel ? r6.xy : r5.yz;
  r2.xyw = cDiffCol.xyz * r2.xyw;
  r5.xzw = cSpecCol.xyz * r5.x;
  r3.xzw = v7.xyz + r3.xzw;
  r0.xyz = r5.xzw * r0.xyz;
  r0.xyz = r3.xzw * r2.xyw + r0.xyz;
  if (bEnvPass != 0) {
    r0.w = r0.w + r0.w;
    r1.xyz = r0.w * r4.xyz - r1.xyz;
    r1 = SAMPLE_LVL(sEnvMap, r1.xyz, data1.x);
    r1.xyz = r1.xyz * r1.w;
    r1.xyz = r1.xyz * r1.xyz;
    r1.xyz = gCubemapScale.x * r1.xyz;
    r1.xyz = cEnvCol.xyz * r1.xyz;
    r1.xyz = r1.xyz * r5.y;
    r0.xyz = r1.xyz * r3.y + r0.xyz;
  }
  r1.xyz = r0.xyz * r2.z;
  r0.xyz = -r0.xyz * r2.z + cFogCol.xyz;
  o0.xyz = v6.z * r0.xyz + r1.xyz;
  r0.x = gCstFadeValue.x * gColorControl.w;
  o0.w = r6.w * r0.x;
  return;
}