// Deferred Vertex (2x Displacement + Cubemap)

#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"
#include "CB/FullDeferredScene_Vertex.hlsl"
#include "texture.hlsl"
#include "3Dmigoto.hlsl"

TEXTURE(_2D,sDiffuseMap0,0,3);
TEXTURE(_2D,sNormalMap0,1,5);
TEXTURE(_2D,sDiffuseMap1,2,6);
TEXTURE(_2D,sNormalMap1,3,7);
TEXTURE(_2D,sBlendMap,4,2);
TEXTURE(_2D,sSpecularMap,5,4);
TEXTURE(_2D,sDisplacementMap0,6,0);
TEXTURE(_2D,sDisplacementMap1,8,1);
TEXTURE(_Cube,sEnvMap,9,8);
TEXTURE(_2D,sSelfAOMap,12,9);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  r0.xyz = cViewPosStereo() - v2.xyz;
  r0.xyz = normalise(r0.xyz);
  r1.x = dot(v3.xyz, r0.xyz);
  r1.y = dot(v4.xyz, r0.xyz);
  r0.w = r1.y / r1.x;
  r2.yw = float2(-0.25,0.25);
  r2.xz = cStain.w;
  r3 = r2.yxwz * -r1.xyxy;
  r2 = r3 * r2 + v1.xyxy;
  r1.z = SAMPLE(sDisplacementMap0, r2.xy).x;
  r1.w = SAMPLE(sDisplacementMap1, r2.xy).x;
  r2.x = SAMPLE(sBlendMap, r2.xy).x;
  r2.x = 1 - r2.x;
  r2.y = cBlend.w * v6.z;
  r3.y = v6.x + v6.x;
  r3.w = cBlend.z * v6.z + 1;
  r2.y = r3.w * r3.y - r2.y;
  r2.x = saturate(r2.x * -r3.w + r2.y);
  r1.w = r1.w - r1.z;
  r1.z = r2.x * r1.w + r1.z;
  r4.y = 0.5 - r1.z;
  r1.z = cmp(-0.25 >= r4.y);
  r1.w = r1.x / 2;
  r4.w = r1.w / -r1.y;
  r4.x = r3.x / -r1.y;
  r4.z = 0;
  r5 = r1.z ? r4.wzxy : 0;
  r1.z = SAMPLE(sDisplacementMap0, v1.xy).x;
  r1.w = SAMPLE(sDisplacementMap1, v1.xy).x;
  r2.x = SAMPLE(sBlendMap, v1.xy).x;
  r2.x = 1 - r2.x;
  r2.x = saturate(r2.x * -r3.w + r2.y);
  r1.w = r1.w - r1.z;
  r1.z = r2.x * r1.w + r1.z;
  r4.w = 0.5 - r1.z;
  r1.z = cmp(0 >= r4.w);
  r5 = r1.z ? r4 : r5;
  r1.z = SAMPLE(sDisplacementMap0, r2.zw).x;
  r1.w = SAMPLE(sDisplacementMap1, r2.zw).x;
  r2.x = SAMPLE(sBlendMap, r2.zw).x;
  r2.x = 1 - r2.x;
  r2.x = saturate(r2.x * -r3.w + r2.y);
  r1.w = r1.w - r1.z;
  r1.z = r2.x * r1.w + r1.z;
  r4.y = 0.5 - r1.z;
  r1.z = cmp(0.25 >= r4.y);
  r4.x = r3.z / -r1.y;
  r5 = r1.z ? r4.zwxy : r5;
  r3.y = 0.5;
  r3.x = cStain.w;
  r1.zw = r3.yx * -r1.xy;
  r2.xz = r1.zw * r3.xy + v1.xy;
  r1.w = SAMPLE(sDisplacementMap0, r2.xz).x;
  r2.w = SAMPLE(sDisplacementMap1, r2.xz).x;
  r2.x = SAMPLE(sBlendMap, r2.xz).x;
  r2.x = 1 - r2.x;
  r2.x = saturate(r2.x * -r3.w + r2.y);
  r2.z = r2.w - r1.w;
  r1.w = r2.x * r2.z + r1.w;
  r4.w = 0.5 - r1.w;
  r1.w = cmp(0.5 >= r4.w);
  r4.z = r1.z / -r1.y;
  r4 = r1.w ? r4 : r5;
  r1.zw = r4.wz - r4.yx;
  r1.z = r1.z / r1.w;
  r1.w = -r1.z * r4.z + r4.w;
  r1.z = -r1.z + r0.w;
  r5.w = r1.w / r1.z;
  r1.z = r5.w * r0.w;
  r2.xz = -r1.xy * r1.z;
  r2.xz = r2.xz * cStain.w + v1.xy;
  r1.w = SAMPLE(sDisplacementMap0, r2.xz).x;
  r2.w = SAMPLE(sDisplacementMap1, r2.xz).x;
  r2.x = SAMPLE(sBlendMap, r2.xz).x;
  r2.x = 1 - r2.x;
  r2.x = saturate(r2.x * -r3.w + r2.y);
  r2.z = r2.w - r1.w;
  r1.w = r2.x * r2.z + r1.w;
  r5.x = 0.5 - r1.w;
  r1.w = cmp(r5.x < r1.z);
  r5.yz = r4.xy;
  r4.xy = r5.wx;
  r4 = r1.w ? r5.yzwx : r4;
  r1.w = -r0.w * r5.w + r5.x;
  r1.w = cmp(0.01 < abs(r1.w));
  r2.xz = r4.wz - r4.yx;
  r2.x = r2.x / r2.z;
  r2.z = -r2.x * r4.z + r4.w;
  r2.x = -r2.x + r0.w;
  r5.w = r2.z / r2.x;
  r2.x = r5.w * r0.w;
  r2.zw = r2.x * -r1.xy;
  r2.zw = r2.zw * cStain.w + v1.xy;
  r3.x = SAMPLE(sDisplacementMap0, r2.zw).x;
  r3.y = SAMPLE(sDisplacementMap1, r2.zw).x;
  r2.z = SAMPLE(sBlendMap, r2.zw).x;
  if (r1.w != 0) {
    r2.z = 1 - r2.z;
    r2.z = saturate(r2.z * -r3.w + r2.y);
    r2.w = r3.y - r3.x;
    r2.z = r2.z * r2.w + r3.x;
    r5.x = 0.5 - r2.z;
    r2.z = cmp(r5.x < r2.x);
    r5.yz = r4.xy;
    r4.xy = r5.wx;
    r4 = r2.z ? r5.yzwx : r4;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  } else {
    r5.yz = r4.zw;
    r2.z = r5.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r2.x = r2.z - r1.z;
  r2.x = cmp(0.01 < abs(r2.x));
  r1.w = r1.w ? r2.x : 0;
  r2.xw = r5.zy - r4.yx;
  r2.x = r2.x / r2.w;
  r2.w = -r2.x * r5.y + r5.z;
  r2.x = -r2.x + r0.w;
  r4.z = r2.w / r2.x;
  r2.x = r4.z * r0.w;
  r3.xy = r2.x * -r1.xy;
  r3.xy = r3.xy * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r3.xy).x;
  r3.z = SAMPLE(sDisplacementMap1, r3.xy).x;
  r3.x = SAMPLE(sBlendMap, r3.xy).x;
  if (r1.w != 0) {
    r3.x = 1 - r3.x;
    r3.x = saturate(r3.x * -r3.w + r2.y);
    r3.y = r3.z - r2.w;
    r2.w = r3.x * r3.y + r2.w;
    r4.w = 0.5 - r2.w;
    r2.w = cmp(r4.w < r2.x);
    r5.xw = r4.wz;
    r4 = r2.w ? r4 : r5.wxyz;
    r5.yz = r4.zw;
    r2.z = r5.x;
    r1.z = r2.x;
  }
  r1.z = r2.z - r1.z;
  r1.z = cmp(0.01 < abs(r1.z));
  r1.z = r1.z ? r1.w : 0;
  r1.w = r5.z - r4.y;
  r2.x = r5.y - r4.x;
  r1.w = r1.w / r2.x;
  r2.x = -r1.w * r5.y + r5.z;
  r1.w = -r1.w + r0.w;
  r1.w = r2.x / r1.w;
  r0.w = r1.w * r0.w;
  r2.xz = -r1.xy * r0.w;
  r2.xz = r2.xz * cStain.w + v1.xy;
  r0.w = SAMPLE(sDisplacementMap0, r2.xz).x;
  r1.w = SAMPLE(sDisplacementMap1, r2.xz).x;
  r2.x = SAMPLE(sBlendMap, r2.xz).x;
  if (r1.z != 0) {
    r1.z = 1 - r2.x;
    r1.z = saturate(r1.z * -r3.w + r2.y);
    r1.w = r1.w - r0.w;
    r0.w = r1.z * r1.w + r0.w;
    r5.x = 0.5 - r0.w;
  }
  r0.w = cStain.w * r5.x;
  r1.xy = r0.w * -r1.xy + v1.xy;
  r1.zw = SAMPLE(sBlendMap, r1.xy).xy;
  r0.w = 1 - r1.z;
  r0.w = saturate(r0.w * -r3.w + r2.y);
  r2.xyz = SAMPLE(sDiffuseMap0, r1.xy).xyz;
  r2.xyz = r2.xyz * r2.xyz;
  r3 = SAMPLE(sSpecularMap, r1.xy);
  r4.xy = SAMPLE(sNormalMap0, r1.xy).xy;
  r4.xy = r4.xy * 2 - 1;
  r5.xyz = SAMPLE(sDiffuseMap1, r1.xy).xyz;
  r1.xy = SAMPLE(sNormalMap1, r1.xy).xy;
  r1.xy = r1.xy * 2 - 1;
  r1.xy = r1.xy - r4.xy;
  r1.xy = r0.w * r1.xy + r4.xy;
  r2.w = dot(r1.xy, r1.xy);
  r2.w = min(1, r2.w);
  r2.w = 1 - r2.w;
  r1.z = sqrt(r2.w);
  r4.xyz = r5.xyz * r5.xyz - r2.xyz;
  r2.xyz = r0.w * r4.xyz + r2.xyz;
  r4 = cSpec1 - cSpec0;
  r4 = r0.w * r4 + cSpec0;
  r3.zw = r3.zw - r3.xy;
  r3.xy = r0.w * r3.zw + r3.xy;
  r5.xyz = cDiffColor.xyz * r2.xyz;
  r2.xyz = -r2.xyz * cDiffColor.xyz + cStain.xyz;
  r2.xyz = v6.y * r2.xyz;
  r2.xyz = r1.w * r2.xyz + r5.xyz;
  r0.w = log2(r4.z);
  r0.w = r3.x * r0.w;
  o1.w = saturate(r0.w / 11);
  r3.xzw = v4.xyz * r1.y;
  r3.xzw = r1.x * v3.xyz + r3.xzw;
  r3.xzw = r1.z * v5.xyz + r3.xzw;
  r3.xzw = normalise(r3.xzw);
  r0.w = saturate(dot(r1.xyz, float3(-0.194948539,-0.33766073,0.27569887)));
  r1.y = saturate(dot(r1.xyz, float3(-0.194948539,0.33766073,0.27569887)));
  r1.x = saturate(dot(r1.xz, float2(0.389897346,0.27569887)));
  r1.yzw = v8.xyz * r1.y;
  r1.yzw = r0.w * v7.xyz + r1.yzw;
  r1.xyz = r1.x * v9.xyz + r1.yzw;
  r0.w = dot(r3.xzw, r0.xyz);
  r1.w = r3.y * r4.x;
  r2.w = saturate(1 - r0.w);
  r2.w = log2(r2.w);
  r2.w = cBlend.x * r2.w;
  r2.w = exp2(r2.w);
  r2.w = -1 + r2.w;
  r2.w = cBlend.y * r2.w + 1;
  r1.w = r2.w * r1.w;
  r0.w = r0.w + r0.w;
  r0.xyz = r0.w * r3.xzw - r0.xyz;
  r0 = SAMPLE_LVL(sEnvMap, r0.xyz, r4.w);
  r0.xyz = r0.xyz * r0.w;
  r0.xyz = r0.xyz * r0.xyz;
  r0.xyz = gCubemapScale.x * r0.xyz;
  r0.xyz = r0.xyz * r4.y;
  r0.xyz = r0.xyz * r2.w;
  r0.xyz = r0.xyz * r3.y;
  r0.w = SAMPLE(sSelfAOMap, v1.zw).x;
  r2.w = r0.w * r0.w - 1;
  r2.w = gAOControl * r2.w + 1;
  o0.y = r2.w * r0.w;
  r0.w = 0.375 * r1.w;
  r0.w = sqrt(r0.w);
  o2.w = min(1, r0.w);
  o2.xyz = sqrt(r2.xyz);
  o1.xyz = r3.xzw * 0.5 + 0.5;
  r0.xyz = r2.xyz * r1.xyz + r0.xyz;
  r0.xyz = gCubemapScale.y * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = max(1e-4, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r0.w = min(1, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = r0.w / 255;
  r0.xyz = r0.xyz / r0.w;
  o3.xyz = min(1, r0.xyz);
  o0.x = v2.w;
  o0.zw = 0;
  o3.w = r0.w;
  return;
}