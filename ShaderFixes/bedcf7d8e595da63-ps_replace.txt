// Particles - Breath + Steam

#include "CB/PerFrame.hlsl"
#include "CB/PerFogControl.hlsl"

cbuffer CB_PS_ParticleMaterialCommon : register(b0)
{
	float4 cEmissive : packoffset(c0);
	float4 cEmissiveMask : packoffset(c1);
	float4 cFadeTerms : packoffset(c2);
	float4x4 cScreenToWorld : packoffset(c3);
	float4x4 cWorldToProj : packoffset(c7);
}

cbuffer CB_PS_ParticleMaterial_Static : register(b7)
{
	bool bSoftParticles : packoffset(c0.x);
	bool bEnvPass : packoffset(c0.y);
	float4 cTranslucency : packoffset(c1);
	float4 cDistortion : packoffset(c2);
	float4 cEnvCol : packoffset(c3);
	float4 cNormalScale : packoffset(c4);
	float cAlphaTest : packoffset(c5.x);
}
#include "texture.hlsl"
TEXTURE(_2D,sDiffuseMap,0,0);
TEXTURE(_2D,sSceneDepth,3,1);

#include "3Dmigoto.hlsl"

void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD7,
	float4 v2 : COLOR1,
	float4 v3 : TEXCOORD0,
	float4 v4 : TEXCOORD1,
	float4 v5 : TEXCOORD2,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2,r3;

	r0 = SAMPLE(sDiffuseMap, v3.xy);
	r0.xyz = r0.xyz * r0.xyz;
	r1 = SAMPLE(sDiffuseMap, v3.zw);
	r1.xyz = r1.xyz * r1.xyz;
	r2.x = 1 - v4.z;
	r1 = r2.x * r1;
	r0 = v4.z * r0 + r1;
	r1.xyz = v1.xyz * r0.xyz;
	r2.xyz = 1 - cEmissiveMask.xyz;
	r3 = cEmissiveMask * v5;
	r2.xyz = r2.xyz * cEmissive.xyz + r3.xyz;
	r1.xyz = log2(abs(r1.xyz));
	r1.xyz = r2.z * r1.xyz;
	r1.xyz = exp2(r1.xyz);
	r0.xyz = r1.xyz * r2.x + r2.y;
	if (bSoftParticles != 0) {
		r1.xy = v4.xy / v4.w;
		r1.x = SAMPLE(sSceneDepth, r1.xy).x;
		r1.x = -v4.w + r1.x;
		r1.x = saturate(cTranslucency.y * r1.x);
		r1 = cFadeTerms.xxxy * r1.x + cFadeTerms.zzzw;
		r0 = r1 * r0;
	}
	r0.w = v1.w * r0.w;
	r1.x = dot(r0.xyz, cFadeTerms.x);
	r1.x = cFadeTerms.z + r1.x;
	r1.xyz = cFogCol.xyz * r1.x - r0.xyz;
	r0.xyz = r3.w * r1.xyz + r0.xyz;
	o0.xyz = v2.w * r0.xyz;
	o0.w = gColorControl.w * r0.w;
	return;
}