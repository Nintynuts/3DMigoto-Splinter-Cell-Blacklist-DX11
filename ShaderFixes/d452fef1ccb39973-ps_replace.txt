// Ambient Occlusion Object

#include "CB_PerFrame.hlsl"

cbuffer CB_PS_AORender : register(b7)
{
	float4x3 cScreenToWorld : packoffset(c0);
	float4x3 cRealWorldToOccluder : packoffset(c3);
	float4x3 cOccluderToWorld : packoffset(c6);
	float2 cIDFactor : packoffset(c9);
	float4 cAtlasS : packoffset(c10);
	float4 cAtlasB : packoffset(c11);
	float cAlphaTest : packoffset(c12);
}

SamplerState sIDMap_s : register(s0);
SamplerState sNormalMap_s : register(s1);
SamplerState sAOField_s : register(s4);
SamplerState sAOField_ba_s : register(s5);
Texture2D<float4> sIDMap : register(t0);
Texture2D<float4> sNormalMap : register(t1);
Texture3D<float4> sAOField : register(t2);
Texture3D<float4> sAOField_ba : register(t3);

#include "3Dmigoto.hlsl"

void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float v2 : TEXCOORD1,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2,r3,r4;

	r0 = v1 / v2.x;
	r1.xyz = sNormalMap.Sample(sNormalMap_s, r0.zw).xyz;
	r1.xyz = r1.yzx * 2 + -1;
	r1.yzw = normalise(r1.xyz);
	r2.xyz = 6 * r1.wyz;
	r3.xyz = mul(r2.xyz, cRealWorldToOccluder);
	r2.z = sIDMap.Sample(sIDMap_s, r0.zw).x;
	r2.xy = r2.z * r0.xy;
	r2.w = 1;
		
	stereo_unfix(r2);
		
	r0.xyz = mul(r2, cScreenToWorld);
	r0.xyz = r0.xyz + r3.xyz;
	r2.xy = sAOField.SampleLevel(sAOField_s, r0.xyz, 0).xy;
	r2.zw = sAOField_ba.SampleLevel(sAOField_ba_s, r0.xyz, 0).xy;
	r0.x = 2.00787401 * r2.x;
	r2.xyz = r2.wyz * 2.00787401 + -1;
	r0.xyz = mul(r2.xyz, cOccluderToWorld);
	r0 = float4(-2,-0,-0,-0) + r0;
	r0 = cIDFactor.y * r0 + float4(1,0,0,0);
	r2.x = dot(r0, r0);
	r3.xyz = r2.x * r0.yzw;
	r4.xyz = r0.x * r0.yzw;
	r2.yzw = r4.xyz + r4.xyz;
	r3.yzw = r0.x * r2.yzw + r3.xyz;
	r3.x = dot(r2, r0);
	r1.x = 1;
	r0.x = saturate(dot(r3, r1));
	o0 = gColorControl.w * r0.x;
	return;
}