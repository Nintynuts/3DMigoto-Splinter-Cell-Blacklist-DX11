// Lighting - Directional

#include "CB/PerCamera.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"

#define LIGHT_REG b1
#include "CB/PS_PerLightBatch.hlsl"
#include "CB/PS_DeferredDirLight.hlsl"
#include "texture.hlsl"
TEXTURE(_2D,sDepth,0,0);
TEXTURE(_2D,sNormal,1,1);
TEXTURE(_2D,sSceneAlbedo,2,3);
TEXTURE(_2D,sSceneLight,3,4);
TEXTURE(_2D,sShadowSamples,15,2);

#include "3Dmigoto.hlsl"

void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float v2 : TEXCOORD1,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2,r3;

	r0.zw = 1;
	r1 = v1 / v2.x;
	r0.xy = r1.xy;
	r1.xy = SAMPLE(sDepth, r1.zw).xw;
	r0.xyz = r1.x * r0.xyz;

	stereo_unfix(r0);

	r2.xyz = mul(r0, cScreenToWorld);
	r0.xyz = cViewPos.xyz - r2.xyz;
	r0.xyz = normalise(r0.xyz) + cDir0.dir.xyz;
	r0.xyz = normalise(r0.xyz);
	r2 = SAMPLE(sNormal, r1.zw);
	r2.xyz = r2.xyz * 2 - 1;
	r0.w = 11 * r2.w;
	r0.w = exp2(r0.w);
	r0.w = max(0.00001, r0.w);
	r2.xyz = normalise(r2.xyz);
	r0.x = saturate(dot(r0.xyz, r2.xyz));
	r0.y = dot(r2.xyz, cDir0.dir.xyz);
	r0.x = log2(r0.x);
	r0.x = r0.w * r0.x;
	r0.z = 2 + r0.w;
	r0.x = exp2(r0.x);
	r0.x = r0.z * r0.x;
	r0.z = r0.y * 0.5 + 0.5;
	r0.y = saturate(r0.y);
	r0.z = r0.z * r0.z;
	r0.z = r0.z * r0.z - r0.y;
	r0.y = r1.y * r0.z + r0.y;
	r0.z = saturate(r0.y);
	r2.xyz = SAMPLE(sShadowSamples, r1.zw).xyz;
	r2.w = 1;
	r0.w = dot(cDir0.mask, r2);
	r0.z = r0.w * r0.z;
	r0.xy = r0.zy * r0.xw;
	r2.xyz = cDir0.dCol.xyz * r0.y;
	r0.x = 0.125 * r0.x;
	r0.xyz = cDir0.sCol.xyz * r0.x;
	r3 = SAMPLE(sSceneLight, r1.zw);
	r1 = SAMPLE(sSceneAlbedo, r1.zw);
	r1 = r1 * r1;
	r3.xyz = r3.xyz * r3.w;
	r3.xyz = r3.xyz * r3.xyz;
	r3.xyz = gCubemapScale.x * r3.xyz;
	r1.xyz = r2.xyz * r1.xyz + r3.xyz;
	r0.w = 8.0/3 * r1.w;
	o0.xyz = r0.xyz * r0.w + r1.xyz;
	o0.w = 1;
	return;
}