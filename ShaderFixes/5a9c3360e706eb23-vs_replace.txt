// Particles - Steam

#include "particles.hlsl"

struct Omni
{
	float4 pos;
	float4 dCol;
	float4 atten;
};

struct Spot
{
	float4 pos;
	float4 dCol;
	float4 atten;
	float4x4 proj;
};

struct Dir
{
	float4 dir;
	float4 dCol;
};

cbuffer CB_VS_ParticleMaterial_Static : register(b7)
{
	float4 cTranslucency : packoffset(c0);

	Omni cOmni0 : packoffset(c1);
	Omni cOmni1 : packoffset(c4);
	Omni cOmni2 : packoffset(c7);
	Omni cOmni3 : packoffset(c10);
	Spot cSpot0 : packoffset(c13);
	Spot cSpot1 : packoffset(c20);
	Spot cSpot2 : packoffset(c27);
	Dir cDir0 : packoffset(c34);

	bool bOmni0 : packoffset(c36.x);
	bool bOmni1 : packoffset(c36.y);
	bool bOmni2 : packoffset(c36.z);
	bool bOmni3 : packoffset(c36.w);
	bool bSpot0 : packoffset(c37.x);
	bool bSpot1 : packoffset(c37.y);
	bool bSpot2 : packoffset(c37.z);
	bool bDir0 : packoffset(c37.w);
}

void process_omni_light(Omni cOmni, bool bOmni, float3 r1, float3 r2, inout float3 r3)
{	
	if (!bOmni)
		return;
	
	float3 r4 = cOmni.pos.xyz + -r1;
	float3 r5 = 0.0001 + r4;
	float r6 = dot(r4, r5 * rsqrt(dot(r5, r5)));
	
	if(!cmp(r6 < cOmni.pos.w))
		return;
	
	r6 = saturate(r6 * cOmni.atten.x + cOmni.atten.z);
	r6 = -r6 * r6 + 1;
	r6 = r6 * r6;
	r6 = saturate(max(cTranslucency.x, dot(r2, r5))) * r6;
	
	r3 = r6 * cOmni.dCol.xyz + r3;
}

void process_spot_light(Spot cSpot, bool bSpot, const float4 r1, const float3 r2, inout float3 r3)
{
	if (!bSpot)
		return;
	
	float2 r4;
	r4.x = dot(r1, cSpot.proj._m00_m10_m20_m30);
	r4.y = dot(r1, cSpot.proj._m01_m11_m21_m31);
	float r5 = dot(r1, cSpot.proj._m02_m12_m22_m32);
	float r6 = dot(r1, cSpot.proj._m03_m13_m23_m33);
	
	if (!cmp(abs(r5) < 1))
		return;
	
	float3 r7 = cSpot.pos.xyz + -r1.xyz;
	float3 r8 = 0.0001 + r7;
	
	r8 = r8 * rsqrt(dot(r8, r8));
	r4 = r4 / r6;
	r4 = r4 * 2 + -1;
	r4 = min(1, abs(r4));
	r4 = -r4 * r4 + 1;
	
	float r9 = saturate(dot(r7, r8) * cSpot.atten.x + cSpot.atten.y);
	r9 = -r9 * r9 + 1;
	r9 = r4.x * r4.y * r9;
	r9 = r9 * r9;
	r9 = saturate(max(cTranslucency.x, dot(r2, r8))) * r9;
	r3 = r9 * cSpot.dCol.xyz + r3;
}

void main(
	float4 v0 : POSITION0,
	float4 v1 : NORMAL0,
	uint4 v2 : TEXCOORD0,
	float4 v3 : TEXCOORD1,
	float4 v4 : COLOR0,
	int2 v5 : BLENDINDICES0,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD7,
	out float4 o2 : COLOR1,
	out float4 o3 : TEXCOORD0,
	out float4 o4 : TEXCOORD1,
	out float4 o5 : TEXCOORD2)
{
	float4 r1,r3,r4,r5,r7,r11;

	#include "particle_common.hlsl"

	if (!all(o2 == 0)) {
		float3 r2 = normalise(-cCenter_Position.xyz + r4.xyz);
		r2 = normalise(r2 + r3.xyz);		
		r3.xyz = 0;
		process_omni_light(cOmni0, bOmni0, r1.xyz, r2, r3.xyz);
		process_omni_light(cOmni1, bOmni1, r1.xyz, r2, r3.xyz);
		process_omni_light(cOmni2, bOmni2, r1.xyz, r2, r3.xyz);
		process_omni_light(cOmni3, bOmni3, r1.xyz, r2, r3.xyz);		
		process_spot_light(cSpot0, bSpot0, r1, r2, r3.xyz);
		process_spot_light(cSpot1, bSpot1, r1, r2, r3.xyz);
		process_spot_light(cSpot1, bSpot2, r1, r2, r3.xyz);
		// process dir light*/
		if (bDir0) {
			float temp = dot(r2, cDir0.dir.xyz);
			r1.w = saturate(max(cTranslucency.x, r1.w));
			r2 = r1.w * cDir0.dCol.xyz + r3.xyz;
			r3.xyz = r2;
		}

		o1.xyz *= (r3.xyz + o2.xyz);
		
		// Moved from PS
		o4.xy = o4.xy / o4.w;
	}
	return;
}