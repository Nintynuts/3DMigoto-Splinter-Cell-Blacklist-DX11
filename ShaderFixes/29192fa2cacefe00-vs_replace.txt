// Skin mesh (un-culled)

cbuffer CB_PerCamera : register(b11)
{
	float4x4 gWorldToProj : packoffset(c0);
	float4x4 gWorldToView : packoffset(c4);
	float4x4 gProjection : packoffset(c8);
	float4 cProjSkinMesh : packoffset(c12);
	float4 gViewViewPos : packoffset(c13);
	float4 gHalfRenderTargetSize : packoffset(c14);
	float4 gVPTexelRes : packoffset(c15);
	float4 gViewportSB : packoffset(c16);
	float4 cViewPos_VS : packoffset(c17);
	float4 cViewPos : packoffset(c18);
	float2 gViewportOffset : packoffset(c19);
}

cbuffer CB_PerObject : register(b9)
{
	float4x3 gLocalToWorld : packoffset(c0);
	float4 gDrawScale : packoffset(c3);
	float4 cId : packoffset(c4);
	float4 cSHParams[7] : packoffset(c5);
	float cAOID : packoffset(c12);
	bool bUseSH : packoffset(c12.y);
}

cbuffer CB_VS_Morphing : register(b0)
{
	float4 gForces : packoffset(c0);
}

cbuffer CB_BoneTransform : register(b2)
{
	float4 gBones[156] : packoffset(c0);
}

cbuffer CB_VS_ColorPalette : register(b4)
{
	float4 cColorPalette[16] : packoffset(c0);
	bool bUseColorPalette : packoffset(c16);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main(
	float4 v0 : POSITION0,
	int4 v1 : TEXCOORD0,
	int2 v2 : TEXCOORD1,
	float4 v3 : NORMAL0,
	float4 v4 : TANGENT0,
	float4 v5 : BINORMAL0,
	int4 v6 : BLENDINDICES0,
	uint4 v7 : BLENDWEIGHT0,
	out float4 o0 : SV_Position0,
	out float4 r5s : TEXCOORD0,
	out float4 r2min : TEXCOORD1,
	out float4 r6w : TEXCOORD2,
	out float4 r0w : TEXCOORD3,
	out float4 r7w : TEXCOORD4,
	out float4 colour : TEXCOORD5)
{
	float4 r0,r1,r2,r3,r4,r5,r6,r7;
	
	r0.xyzw = (int4)v6.xyzw * int4(3,3,3,3);
	r1.xyzw = (uint4)v7.xyzw;
	r1.xyzw = float4(0.00392156886,0.00392156886,0.00392156886,0.00392156886) * r1.xyzw;
	r2.xyzw = mad((int4)v6.xxyy, int4(3,3,3,3), int4(1,2,1,2));
	r3.xyzw = gBones[r0.y].xyzw * r1.yyyy;
	r4.xyzw = gBones[r2.z].xyzw * r1.yyyy;
	r5.xyzw = gBones[r2.w].xyzw * r1.yyyy;
	r3.xyzw = gBones[r0.x].xyzw * r1.xxxx + r3.xyzw;
	r4.xyzw = gBones[r2.x].xyzw * r1.xxxx + r4.xyzw;
	r2.xyzw = gBones[r2.y].xyzw * r1.xxxx + r5.xyzw;
	r5.xyzw = mad((int4)v6.zzww, int4(3,3,3,3), int4(1,2,1,2));
	r3.xyzw = gBones[r0.z].xyzw * r1.zzzz + r3.xyzw;
	r4.xyzw = gBones[r5.x].xyzw * r1.zzzz + r4.xyzw;
	r2.xyzw = gBones[r5.y].xyzw * r1.zzzz + r2.xyzw;
	r0.xyzw = gBones[r0.w].xyzw * r1.wwww + r3.xyzw;
	r3.xyzw = gBones[r5.z].xyzw * r1.wwww + r4.xyzw;
	r1.xyzw = gBones[r5.w].xyzw * r1.wwww + r2.xyzw;
	r2.x = gForces.z * v4.w;
	r2.y = v5.w * gForces.w + gForces.x;
	r2.yz = v0.xy * gForces.yy + r2.yy;
	r2.y = sin(r2.y);
	r4.x = r2.y * r2.x + v0.x;
	r2.y = cos(r2.z);
	r4.y = r2.y * r2.x + v0.y;
	r4.z = v0.z;
	r2.xyz = gDrawScale.xyz * r4.xyz;
	r2.w = v0.w;
	r4.x = dot(r0.xyzw, r2.xyzw);
	r4.y = dot(r3.xyzw, r2.xyzw);
	r4.z = dot(r1.xyzw, r2.xyzw);
	r2.xyz = -cViewPos_VS.xyz + r4.xyz;
	r5.x = dot(r2.xyz, gWorldToProj._m00_m10_m20);
	r5.y = dot(r2.xyz, gWorldToProj._m01_m11_m21);
	r5.z = dot(r2.xyz, gWorldToProj._m02_m12_m22);
	r5.w = dot(r2.xyz, gWorldToProj._m03_m13_m23);
	r2.xyzw = cProjSkinMesh.xyzw + r5.xyzw;
	r2min.w = min(64000, r2.w);
	r5.xy = (int2)v1.xy;
	r5.zw = (int2)v2.xy;
	r5s.xyzw = float4(0.00048828125,0.00048828125,0.00048828125,0.00048828125) * r5.xyzw;
	r5.xyz = v4.zyx * float3(2,2,2) + float3(-1,-1,-1);
	r6.x = dot(r5.xyz, r0.xyz);
	r6.y = dot(r5.xyz, r3.xyz);
	r6.z = dot(r5.xyz, r1.xyz);
	r5.xyz = v3.zyx * float3(2,2,2) + float3(-1,-1,-1);
	r7.x = dot(r5.xyz, r0.xyz);
	r7.y = dot(r5.xyz, r3.xyz);
	r7.z = dot(r5.xyz, r1.xyz);
	r5.xyz = v5.zyx * float3(2,2,2) + float3(-1,-1,-1);
	r0.x = dot(r5.xyz, r0.xyz);
	r0.y = dot(r5.xyz, r3.xyz);
	r0.z = dot(r5.xyz, r1.xyz);
	r6w.x = dot(r6.xyz, gLocalToWorld._m00_m10_m20);
	r6w.y = dot(r6.xyz, gLocalToWorld._m01_m11_m21);
	r6w.z = dot(r6.xyz, gLocalToWorld._m02_m12_m22);
	r0w.x = dot(r0.xyz, gLocalToWorld._m00_m10_m20);
	r0w.y = dot(r0.xyz, gLocalToWorld._m01_m11_m21);
	r0w.z = dot(r0.xyz, gLocalToWorld._m02_m12_m22);
	r7w.x = dot(r7.xyz, gLocalToWorld._m00_m10_m20);
	r7w.y = dot(r7.xyz, gLocalToWorld._m01_m11_m21);
	r7w.z = dot(r7.xyz, gLocalToWorld._m02_m12_m22);
	if (bUseColorPalette != 0) {
		r0.x = 255 * v3.w;
		r0.x = (int)r0.x;
		colour.xyzw = cColorPalette[r0.x].xyzw;
	} else {
		colour.xyzw = float4(1,1,1,1);
	}
	o0.xyzw = r2.xyzw;
	r2min.xyz = r4.xyz;
	r6w.w = 0;
	r0w.w = 0;
	r7w.w = 0;
	
	//float4 tex_filter = IniParams.Load(int2(2,0));
	//if (tex_filter.x = -3)
	//{
	//	float4 stereo = StereoParams.Load(0);
	//	o0.x -= stereo.x * 60;
	//	o0.y += stereo.x * 60;
	//}
	return;
}