// Deferred Vertex (2x Displacement)

#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"
#include "CB/FullDeferredScene_Vertex.hlsl"
#include "texture.hlsl"
#include "3Dmigoto.hlsl"

TEXTURE(_2D,sDiffuseMap0,0,3);
TEXTURE(_2D,sNormalMap0,1,5);
TEXTURE(_2D,sDiffuseMap1,2,6);
TEXTURE(_2D,sNormalMap1,3,7);
TEXTURE(_2D,sBlendMap,4,2);
TEXTURE(_2D,sSpecularMap,5,4);
TEXTURE(_2D,sDisplacementMap0,6,0);
TEXTURE(_2D,sDisplacementMap1,8,1);
TEXTURE(_2D,sSelfAOMap,12,8);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  r0.xyz = cViewPosStereo() - v2.xyz;
  r0.xyz = normalise(r0.xyz);
  r1.x = dot(v3.xyz, r0.xyz);
  r1.y = dot(v4.xyz, r0.xyz);
  r0.x = r1.y / r1.x;
  r2.yw = float2(-0.25,0.25);
  r2.xz = cStain.w;
  r3 = r2.yxwz * -r1.xyxy;
  r2 = r3 * r2 + v1.xyxy;
  r0.y = SAMPLE(sDisplacementMap0, r2.xy).x;
  r0.z = SAMPLE(sDisplacementMap1, r2.xy).x;
  r0.w = SAMPLE(sBlendMap, r2.xy).x;
  r0.w = 1 - r0.w;
  r1.z = cBlend.w * v6.z;
  r1.w = v6.x + v6.x;
  r2.x = cBlend.z * v6.z + 1;
  r1.z = r2.x * r1.w - r1.z;
  r0.w = saturate(r0.w * -r2.x + r1.z);
  r0.z = r0.z - r0.y;
  r0.y = r0.w * r0.z + r0.y;
  r4.y = 0.5 - r0.y;
  r0.y = cmp(-0.25 >= r4.y);
  r0.z = r1.x / 2;
  r4.w = r0.z / -r1.y;
  r4.x = r3.x / -r1.y;
  r4.z = 0;
  r5 = r0.y ? r4.wzxy : 0;
  r0.y = SAMPLE(sDisplacementMap0, v1.xy).x;
  r0.z = SAMPLE(sDisplacementMap1, v1.xy).x;
  r0.w = SAMPLE(sBlendMap, v1.xy).x;
  r0.w = 1 - r0.w;
  r0.w = saturate(r0.w * -r2.x + r1.z);
  r0.z = r0.z - r0.y;
  r0.y = r0.w * r0.z + r0.y;
  r4.w = 0.5 - r0.y;
  r0.y = cmp(0 >= r4.w);
  r5 = r0.y ? r4 : r5;
  r0.y = SAMPLE(sDisplacementMap0, r2.zw).x;
  r0.z = SAMPLE(sDisplacementMap1, r2.zw).x;
  r0.w = SAMPLE(sBlendMap, r2.zw).x;
  r0.w = 1 - r0.w;
  r0.w = saturate(r0.w * -r2.x + r1.z);
  r0.z = r0.z - r0.y;
  r0.y = r0.w * r0.z + r0.y;
  r4.y = 0.5 - r0.y;
  r0.y = cmp(0.25 >= r4.y);
  r4.x = r3.z / -r1.y;
  r3 = r0.y ? r4.zwxy : r5;
  r5.y = 0.5;
  r5.x = cStain.w;
  r0.yz = r5.yx * -r1.xy;
  r0.zw = r0.yz * r5.xy + v1.xy;
  r1.w = SAMPLE(sDisplacementMap0, r0.zw).x;
  r2.y = SAMPLE(sDisplacementMap1, r0.zw).x;
  r0.z = SAMPLE(sBlendMap, r0.zw).x;
  r0.z = 1 - r0.z;
  r0.z = saturate(r0.z * -r2.x + r1.z);
  r0.w = r2.y - r1.w;
  r0.z = r0.z * r0.w + r1.w;
  r4.w = 0.5 - r0.z;
  r0.z = cmp(0.5 >= r4.w);
  r4.z = r0.y / -r1.y;
  r3 = r0.z ? r4 : r3;
  r0.yz = r3.wz - r3.yx;
  r0.y = r0.y / r0.z;
  r0.z = -r0.y * r3.z + r3.w;
  r0.y = r0.x - r0.y;
  r4.w = r0.z / r0.y;
  r0.y = r4.w * r0.x;
  r0.zw = -r1.xy * r0.y;
  r0.zw = r0.zw * cStain.w + v1.xy;
  r1.w = SAMPLE(sDisplacementMap0, r0.zw).x;
  r2.y = SAMPLE(sDisplacementMap1, r0.zw).x;
  r0.z = SAMPLE(sBlendMap, r0.zw).x;
  r0.z = 1 - r0.z;
  r0.z = saturate(r0.z * -r2.x + r1.z);
  r0.w = r2.y - r1.w;
  r0.z = r0.z * r0.w + r1.w;
  r4.x = 0.5 - r0.z;
  r0.z = cmp(r4.x < r0.y);
  r4.yz = r3.xy;
  r3.xy = r4.wx;
  r3 = r0.z ? r4.yzwx : r3;
  r0.z = -r0.x * r4.w + r4.x;
  r0.z = cmp(0.01 < abs(r0.z));
  r2.yz = r3.wz - r3.yx;
  r0.w = r2.y / r2.z;
  r1.w = -r0.w * r3.z + r3.w;
  r0.w = r0.x - r0.w;
  r4.w = r1.w / r0.w;
  r0.w = r4.w * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r1.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r2.w = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r2.w - r1.w;
    r1.w = r2.y * r2.z + r1.w;
    r4.x = 0.5 - r1.w;
    r1.w = cmp(r4.x < r0.w);
    r4.yz = r3.xy;
    r3.xy = r4.wx;
    r3 = r1.w ? r4.yzwx : r3;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  } else {
    r4.yz = r3.zw;
    r1.w = r4.x;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.w = r1.w - r0.y;
  r0.w = cmp(0.01 < abs(r0.w));
  r0.z = r0.w ? r0.z : 0;
  r2.yz = r4.zy - r3.yx;
  r0.w = r2.y / r2.z;
  r2.y = -r0.w * r4.y + r4.z;
  r0.w = r0.x - r0.w;
  r3.z = r2.y / r0.w;
  r0.w = r3.z * r0.x;
  r2.yz = -r1.xy * r0.w;
  r2.yz = r2.yz * cStain.w + v1.xy;
  r2.w = SAMPLE(sDisplacementMap0, r2.yz).x;
  r5.x = SAMPLE(sDisplacementMap1, r2.yz).x;
  r2.y = SAMPLE(sBlendMap, r2.yz).x;
  if (r0.z != 0) {
    r2.y = 1 - r2.y;
    r2.y = saturate(r2.y * -r2.x + r1.z);
    r2.z = r5.x - r2.w;
    r2.y = r2.y * r2.z + r2.w;
    r3.w = 0.5 - r2.y;
    r2.y = cmp(r3.w < r0.w);
    r4.xw = r3.wz;
    r3 = r2.y ? r3 : r4.wxyz;
    r4.yz = r3.zw;
    r1.w = r4.x;
    r0.y = r0.w;
  }
  r0.y = r1.w - r0.y;
  r0.y = cmp(0.01 < abs(r0.y));
  r0.y = r0.y ? r0.z : 0;
  r0.zw = r4.zy - r3.yx;
  r0.z = r0.z / r0.w;
  r0.w = -r0.z * r4.y + r4.z;
  r0.z = r0.x - r0.z;
  r0.z = r0.w / r0.z;
  r0.x = r0.x * r0.z;
  r0.xz = -r1.xy * r0.x;
  r0.xz = r0.xz * cStain.w + v1.xy;
  r0.w = SAMPLE(sDisplacementMap0, r0.xz).x;
  r1.w = SAMPLE(sDisplacementMap1, r0.xz).x;
  r0.x = SAMPLE(sBlendMap, r0.xz).x;
  if (r0.y != 0) {
    r0.x = 1 - r0.x;
    r0.x = saturate(r0.x * -r2.x + r1.z);
    r0.y = r1.w - r0.w;
    r0.x = r0.x * r0.y + r0.w;
    r4.x = 0.5 - r0.x;
  }
  r0.x = cStain.w * r4.x;
  r0.xy = r0.x * -r1.xy + v1.xy;
  r0.zw = SAMPLE(sBlendMap, r0.xy).xy;
  r0.z = 1 - r0.z;
  r0.z = saturate(r0.z * -r2.x + r1.z);
  r1.xyz = SAMPLE(sDiffuseMap0, r0.xy).xyz;
  r1.xyz = r1.xyz * r1.xyz;
  r2 = SAMPLE(sSpecularMap, r0.xy);
  r3.xy = SAMPLE(sNormalMap0, r0.xy).xy;
  r3.xy = r3.xy * 2 - 1;
  r4.xyz = SAMPLE(sDiffuseMap1, r0.xy).xyz;
  r0.xy = SAMPLE(sNormalMap1, r0.xy).xy;
  r0.xy = r0.xy * 2 - 1;
  r0.xy = r0.xy - r3.xy;
  r0.xy = r0.z * r0.xy + r3.xy;
  r1.w = dot(r0.xy, r0.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 - r1.w;
  r1.w = sqrt(r1.w);
  r3.xyz = r4.xyz * r4.xyz - r1.xyz;
  r1.xyz = r0.z * r3.xyz + r1.xyz;
  r3.xy = cSpec1.xz - cSpec0.xz;
  r3.xy = r0.z * r3.xy + cSpec0.xz;
  r2.zw = r2.zw - r2.xy;
  r2.xy = r0.z * r2.zw + r2.xy;
  r4.xyz = cDiffColor.xyz * r1.xyz;
  r1.xyz = -r1.xyz * cDiffColor.xyz + cStain.xyz;
  r1.xyz = v6.y * r1.xyz;
  r1.xyz = r0.w * r1.xyz + r4.xyz;
  r0.z = log2(r3.y);
  r0.z = r2.x * r0.z;
  o1.w = saturate(r0.z / 11);
  r0.yzw = v4.xyz * r0.y;
  r0.xyz = r0.x * v3.xyz + r0.yzw;
  r0.xyz = r1.w * v5.xyz + r0.xyz;
  r0.xyz = normalise(r0.xyz);
  r0.w = r2.y * r3.x;
  r1.w = SAMPLE(sSelfAOMap, v1.zw).x;
  r2.x = r1.w * r1.w - 1;
  r2.x = gAOControl * r2.x + 1;
  o0.y = r2.x * r1.w;
  r0.w = 0.375 * r0.w;
  r0.w = sqrt(r0.w);
  o2.w = min(1, r0.w);
  o2.xyz = sqrt(r1.xyz);
  o1.xyz = r0.xyz * 0.5 + 0.5;
  r0.xyz = v7.xyz * r1.xyz;
  r0.xyz = gCubemapScale.y * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = max(1e-4, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r0.w = min(1, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = r0.w / 255;
  r0.xyz = r0.xyz / r0.w;
  o3.xyz = min(1, r0.xyz);
  o0.x = v2.w;
  o0.zw = 0;
  o3.w = r0.w;
  return;
}