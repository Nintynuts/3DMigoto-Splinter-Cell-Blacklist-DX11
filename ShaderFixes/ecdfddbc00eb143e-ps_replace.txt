// Deferred Dynamic + Vertex (Cubemap)

#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"
#include "CB/PS_FullDeferredMaterial_Dynamic.hlsl"
#include "CB/FullDeferredScene_Vertex.hlsl"
#include "texture.hlsl"
#include "3Dmigoto.hlsl"

TEXTURE(_2D,sDiffuseMap0,0,1);
TEXTURE(_2D,sNormalMap0,1,3);
TEXTURE(_2D,sDiffuseMap1,2,4);
TEXTURE(_2D,sNormalMap1,3,5);
TEXTURE(_2D,sBlendMap,4,0);
TEXTURE(_2D,sSpecularMap,5,2);
TEXTURE(_Cube,sEnvMap,9,6);
TEXTURE(_2D,sSelfAOMap,12,7);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = SAMPLE(sSelfAOMap, v1.zw).x;
  r0.y = r0.x * r0.x - 1;
  r0.y = gAOControl * r0.y + 1;
  o0.y = r0.x * r0.y;
  o0.x = v2.w;
  o0.zw = 0;
  r0.x = cBlend.w * v6.z;
  r0.y = v6.x + v6.x;
  r0.z = cBlend.z * v6.z + 1;
  r0.x = r0.z * r0.y - r0.x;
  r1.xy = v1.xy;
  r1.z = 1;
  r2.x = dot(r1.xyz, cTexTransform1._m00_m10_m30);
  r2.y = dot(r1.xyz, cTexTransform1._m01_m11_m31);
  r0.yw = SAMPLE(sBlendMap, r2.xy).xy;
  r2.xy = SAMPLE(sNormalMap1, r2.xy).xy;
  r2.xy = r2.xy * 2 - 1;
  r0.y = 1 - r0.y;
  r0.x = saturate(r0.y * -r0.z + r0.x);
  r3.x = dot(r1.xyz, cTexTransform0._m00_m10_m30);
  r3.y = dot(r1.xyz, cTexTransform0._m01_m11_m31);
  r0.yz = SAMPLE(sNormalMap0, r3.xy).xy;
  r0.yz = r0.yz * 2 - 1;
  r0.yz = r2.xy * r0.x + r0.yz;
  r1.x = 1 + r0.x;
  r0.yz = r0.yz / r1.x;
  r1.xyz = v4.xyz * r0.z;
  r1.xyz = r0.y * v3.xyz + r1.xyz;
  r0.y = dot(r0.yz, r0.yz);
  r0.y = 1 - r0.y;
  r0.y = sqrt(r0.y);
  r1.xyz = r0.y * v5.xyz + r1.xyz;
  r1.xyz = normalise(r1.xyz);
  o1.xyz = r1.xyz * 0.5 + 0.5;
  r2 = cSpec1 - cSpec0;
  r2 = r0.x * r2 + cSpec0;
  r0.y = log2(r2.z);
  r4 = SAMPLE(sSpecularMap, r3.xy);
  r3.zw = r4.zw - r4.xy;
  r3.zw = r0.x * r3.zw + r4.xy;
  r0.y = r3.z * r0.y;
  o1.w = saturate(r0.y / 11);
  r4.xyz = SAMPLE(sDiffuseMap1, r3.xy).xyz;
  r3.xyz = SAMPLE(sDiffuseMap0, r3.xy).xyz;
  r3.xyz = r3.xyz * r3.xyz;
  r4.xyz = r4.xyz * r4.xyz - r3.xyz;
  r0.xyz = r0.x * r4.xyz + r3.xyz;
  r3.xyz = cDiffColor.xyz * r0.xyz;
  r0.xyz = -r0.xyz * cDiffColor.xyz + cStain.xyz;
  r0.xyz = v6.y * r0.xyz;
  r0.xyz = r0.w * r0.xyz + r3.xyz;
  o2.xyz = sqrt(r0.xyz);
  r0.w = r3.w * r2.x;
  r0.w = 0.375 * r0.w;
  r0.w = sqrt(r0.w);
  o2.w = min(1, r0.w);
  r3.xyz = cViewPosStereo() - v2.xyz;
  r3.xyz = normalise(r3.xyz);
  r0.w = dot(r1.xyz, r3.xyz);
  r0.w = r0.w + r0.w;
  r1.xyz = r0.w * r1.xyz - r3.xyz;
  r1 = SAMPLE_LVL(sEnvMap, r1.xyz, r2.w);
  r1.xyz = r1.xyz * r1.w;
  r1.xyz = r1.xyz * r1.xyz;
  r1.xyz = gCubemapScale.x * r1.xyz;
  r1.xyz = r1.xyz * r2.y;
  r1.xyz = r1.xyz * r3.w;
  r0.xyz = r0.xyz * v7.xyz + r1.xyz;
  r0.xyz = gCubemapScale.y * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = max(1e-4, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r0.w = min(1, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = r0.w / 255;
  r0.xyz = r0.xyz / r0.w;
  o3.w = r0.w;
  o3.xyz = min(1, r0.xyz);
  return;
}