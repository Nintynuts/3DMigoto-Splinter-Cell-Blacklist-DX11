// Ambient Occlusion Character

#include "CB_PerFrame.hlsl"

cbuffer CB_PS_AOSphere : register(b7)
{
	float4x3 cScreenToWorld : packoffset(c0);
	float2 cIDFactor : packoffset(c3);
	float cAlphaTest : packoffset(c3.z);
}

SamplerState sIDMap_s : register(s0);
SamplerState sNormalMap_s : register(s1);
SamplerState sAOSphereMap_s : register(s3);
Texture2D<float4> sIDMap : register(t0);
Texture2D<float4> sNormalMap : register(t1);
Texture2D<float4> sAOSphereMap : register(t2);

#include "3Dmigoto.hlsl"

void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float v2 : TEXCOORD1,
	out float4 o0 : SV_Target0)
{
	float4 r0,r1,r2,r3,r4;
	
	r0 = v1 / v2.x;
	r1.z = sIDMap.Sample(sIDMap_s, r0.zw).x;
	r1.xy = r1.z * r0.xy;
	r0.xyz = sNormalMap.Sample(sNormalMap_s, r0.zw).xyz;
	r0.xyz = r0.yzx * 2 + -1;
	r1.w = 1;
			
	stereo_unfix(r1);
	
	r2.wyz = mul(r1, cScreenToWorld);
	r0.w = dot(r2.yzw, r2.yzw);
	r1.x = rsqrt(r0.w);
	r0.w = 4 * r0.w;
	r3.x = min(1, r0.w);
	r1.yzw = r2.yzw * r1.x;
	r3.y = 0.5;
	r3.x += 0.01;
	r2.xy = sAOSphereMap.SampleLevel(sAOSphereMap_s, r3.xy, 0).xy;
	r1.x = 1;
	r1 = r1 * r2.xyyy + float4(-1,-0,-0,-0);
	r1 = cIDFactor.y * r1 + float4(1,0,0,0);
	r2.x = dot(r1, r1);
	r3.xyz = r2.x * r1.yzw;
	r4.xyz = r1.x * r1.yzw;
	r2.yzw = r4.xyz + r4.xyz;
	r3.yzw = r1.x * r2.yzw + r3.xyz;
	r3.x = dot(r2, r1);
	r0.yzw = normalise(r0.xyz);
	r0.x = 1;
	r0.x = saturate(dot(r3, r0));
	o0 = gColorControl.w * r0.x;
	return;
}