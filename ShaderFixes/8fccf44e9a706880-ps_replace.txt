// Deferred Static + Dynamic (Cubemap)

#include "CB/PerFrame.hlsl"
#include "CB/PerCamera.hlsl"
#include "CB/PerCubeMapRenderCell.hlsl"
#include "CB/PS_FullDeferredMaterial_Static.hlsl"
#include "CB/PS_FullDeferredMaterial_Dynamic.hlsl"
#include "3Dmigoto.hlsl"
#include "texture.hlsl"

TEXTURE(_2D,sDiffuseMap,0,0);
TEXTURE(_2D,sNormalMap,1,1);
TEXTURE(_2D,sSpecularMap,2,2);
TEXTURE(_Cube,sEnvMap,9,3);
TEXTURE(_2D,sSelfAOMap,12,4);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD6,
  float4 v7 : TEXCOORD7,
  float4 v8 : TEXCOORD8,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = SAMPLE(sSelfAOMap, v1.zw).x;
  r0.y = r0.x * r0.x - 1;
  r0.y = gAOControl * r0.y + 1;
  o0.y = r0.x * r0.y;
  o0.x = v2.w;
  o0.zw = 0;
  r0.x = 1 - data0.w;
  r1.xy = v1.xy;
  r1.z = 1;
  r2.x = dot(r1.xyz, cTexTransform2._m00_m10_m30);
  r2.y = dot(r1.xyz, cTexTransform2._m01_m11_m31);
  r0.yzw = SAMPLE(sSpecularMap, r2.xy).xyz;
  r0.x = r0.w * r0.x + data0.w;
  r0.x = r0.w * r0.x;
  r0.x = data0.x * r0.x;
  r0.x = log2(r0.x);
  r0.x = r0.x * r0.y;
  o1.w = saturate(r0.x / 11);
  r0.x = dot(r1.xyz, cTexTransform1._m00_m10_m30);
  r0.y = dot(r1.xyz, cTexTransform1._m01_m11_m31);
  r0.xy = SAMPLE(sNormalMap, r0.xy).xy;
  r2.xy = r0.xy * 2 - 1;
  r0.xyw = v4.xyz * r2.y;
  r0.xyw = r2.x * v3.xyz + r0.xyw;
  r1.w = dot(r2.xy, r2.xy);
  r1.w = min(1, r1.w);
  r1.w = 1 - r1.w;
  r2.z = sqrt(r1.w);
  r0.xyw = r2.z * v5.xyz + r0.xyw;
  r1.w = sq_mag(r0.xyw);
  r1.w = rsqrt(r1.w);
  r0.xyw = r1.w * r0.xyw;
  o1.xyz = r0.xyw * 0.5 + 0.5;
  r3.x = dot(r1.xyz, cTexTransform0._m00_m10_m30);
  r3.y = dot(r1.xyz, cTexTransform0._m01_m11_m31);
  r1.xyz = SAMPLE(sDiffuseMap, r3.xy).xyz;
  r1.xyz = r1.xyz * r1.xyz;
  r1.xyz = cDiffCol.xyz * r1.xyz;
  o2.xyz = sqrt(r1.xyz);
  r1.w = data0.y * r0.z;
  r3.xyz = cViewPosStereo() - v2.xyz;
  r3.xyz = normalise(r3.xyz);
  r2.w = dot(r0.xyw, r3.xyz);
  r3.w = saturate(1 - r2.w);
  r2.w = r2.w + r2.w;
  r0.xyw = r2.w * r0.xyw - r3.xyz;
  r4 = SAMPLE_LVL(sEnvMap, r0.xyw, data1.x);
  r0.xyw = r4.xyz * r4.w;
  r0.xyw = r0.xyw * r0.xyw;
  r0.xyw = gCubemapScale.x * r0.xyw;
  r0.xyw = cEnvCol.xyz * r0.xyw;
  r2.w = log2(r3.w);
  r2.w = data1.w * r2.w;
  r2.w = exp2(r2.w);
  r2.w = -1 + r2.w;
  r2.w = data1.z * r2.w + 1;
  r1.w = r2.w * r1.w;
  r0.xyw = r2.w * r0.xyw;
  r0.xyz = r0.xyw * r0.z;
  r0.w = 0.375 * r1.w;
  r0.w = sqrt(r0.w);
  o2.w = min(1, r0.w);
  r0.w = saturate(dot(r2.xyz, float3(-0.194948539,0.33766073,0.27569887)));
  r3.xyz = v7.xyz * r0.w;
  r0.w = saturate(dot(r2.xyz, float3(-0.194948539,-0.33766073,0.27569887)));
  r1.w = saturate(dot(r2.xz, float2(0.389897346,0.27569887)));
  r2.xyz = r0.w * v6.xyz + r3.xyz;
  r2.xyz = r1.w * v8.xyz + r2.xyz;
  r0.xyz = r1.xyz * r2.xyz + r0.xyz;
  r0.xyz = gCubemapScale.y * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = max(1e-4, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r0.w = min(1, r0.w);
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = r0.w / 255;
  r0.xyz = r0.xyz / r0.w;
  o3.w = r0.w;
  o3.xyz = min(1, r0.xyz);
  return;
}