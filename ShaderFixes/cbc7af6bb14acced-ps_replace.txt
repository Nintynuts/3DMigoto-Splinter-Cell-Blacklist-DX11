// Shoulder Pad (less broken, but still broken - disappears)

cbuffer CB_PerFrame : register(b13)
{
	float4 gCameraFadeAlpha : packoffset(c0);
	float4 gCameraFadeShadow : packoffset(c1);
	float4 gColorControl : packoffset(c2);
	float3 cBoostCol : packoffset(c3);
	float cHdrControl : packoffset(c3.w);
	float gAOControl : packoffset(c4);
}

cbuffer CB_PS_FullDeferredMaterial_Static : register(b7)
{
	float4 cDeferredMaterialProps : packoffset(c0);
	float4 cDiffCol : packoffset(c1);
	float4 cSpecCol : packoffset(c2);
	float4 cEnvCol : packoffset(c3);
	float4 cDBlendCol : packoffset(c4);
	float4 data0 : packoffset(c5);
	float4 data1 : packoffset(c6);
	float4 cDx11Padding : packoffset(c7);
	bool bEnvPass : packoffset(c8);
	bool bFresnel : packoffset(c8.y);
}

cbuffer CB_PerCubeMapRenderCell : register(b0)
{
	float2 gCubemapScale : packoffset(c0);
}

SamplerState sDiffuseMap_s : register(s0);
SamplerState sNormalMap_s : register(s1);
SamplerState sSpecularMap_s : register(s2);
SamplerState sSelfAOMap_s : register(s12);
Texture2D<float4> sDiffuseMap : register(t0);
Texture2D<float4> sNormalMap : register(t1);
Texture2D<float4> sSpecularMap : register(t2);
Texture2D<float4> sSelfAOMap : register(t3);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float4 v2 : TEXCOORD1,
	float4 v3 : TEXCOORD2,
	float4 v4 : TEXCOORD3,
	float4 v5 : TEXCOORD4,
	float4 v6 : TEXCOORD6,
	out float4 o0 : SV_Target0,
	out float4 o1 : SV_Target1,
	out float4 o2 : SV_Target2,
	out float4 o3 : SV_Target3)
{
	discard;

	float4 r0,r1;
	
	
	r0.x = sSelfAOMap.Sample(sSelfAOMap_s, v1.zw).x;
	r0.y = r0.x * r0.x + -1;
	r0.y = gAOControl * r0.y + 1;
	o0.y = r0.x * r0.y;
	o0.x = v2.w;
	o0.zw = float2(0,0);
	r0.xy = sNormalMap.Sample(sNormalMap_s, v1.xy).xy;
	r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
	r1.xyz = v4.xyz * r0.yyy;
	r1.xyz = r0.xxx * v3.xyz + r1.xyz;
	r0.x = dot(r0.xy, r0.xy);
	r0.x = min(1, r0.x);
	r0.x = 1 + -r0.x;
	r0.x = sqrt(r0.x);
	r0.xyz = r0.xxx * v5.xyz + r1.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = rsqrt(r0.w);
	r0.xyz = r0.xyz * r0.www;
	o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
	r0.x = 1 + -data0.w;
	r0.yzw = sSpecularMap.Sample(sSpecularMap_s, v1.xy).xyz;
	r0.x = r0.w * r0.x + data0.w;
	r0.x = r0.w * r0.x;
	r0.x = data0.x * r0.x;
	r0.x = log2(r0.x);
	r0.x = r0.x * r0.y;
	r0.y = data0.y * r0.z;
	r0.y = 0.375 * r0.y;
	r0.y = sqrt(r0.y);
	o2.w = min(1, r0.y);
	o1.w = saturate(0.0909090936 * r0.x);
	r0.xyz = sDiffuseMap.Sample(sDiffuseMap_s, v1.xy).xyz;
	r0.xyz = r0.xyz * r0.xyz;
	r0.xyz = cDiffCol.xyz * r0.xyz;
	o2.xyz = sqrt(r0.xyz);
	r0.xyz = v6.xyz * r0.xyz;
	r0.xyz = gCubemapScale.yyy * r0.xyz;
	r0.xyz = sqrt(r0.xyz);
	r0.xyz = max(float3(9.99999975e-005,9.99999975e-005,9.99999975e-005), r0.xyz);
	r0.w = max(r0.x, r0.y);
	r0.w = max(r0.w, r0.z);
	r0.w = min(1, r0.w);
	r0.w = 255 * r0.w;
	r0.w = ceil(r0.w);
	r0.w = 0.00392156886 * r0.w;
	r0.xyz = r0.xyz / r0.www;
	o3.w = r0.w;
	o3.xyz = min(float3(1,1,1), r0.xyz);
	return;
}