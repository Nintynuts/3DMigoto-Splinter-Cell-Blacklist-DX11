; # HUD elements at Depth #
; There are several types of element we want to push to depth (after depth map is complete):
; - Light flare: Drawn at screen depth so we use the depth buffer to push each to depth.
;                Accesses the depth buffer directly via a different mechanism.
; - Intel:       These have text drawn before sprites and before other markers.
;                We use the previous frame's behaviour to include this text each frame.
; - Centre goal: These have text and several sprites. 
;                The text is drawn mid-way so we know it's included.
;                It ends with a single blob.
; - Edge goal:   These are like centre goals, but have an extra arrow sprite and no text.
;                They have 2 blobs drawn at the end because of the arrow.
; - Execute:     These are 3 simple sprites drawn in order, but the depth is sampled
;                below to try and hit the target, instead of going over their head.
; - Crosshair:   Sprites which always use the depth from the middle(ish) of the screen.
;
; With the exception of light flares, these are all 'Markers'. 
;
; The philosophy is to sample depth with a custom shader to a custom resource, then 
; re-use that same depth value for all parts of a marker until a known endpoint is 
; reached for that marker. 
;
; To that end, we have StartDepth, UseDepth and EndDepth which are triggered when 
; appropriate by TextureOverrides for sprites and ShaderOverrides for text, 
; because text textures are generated at runtime and don't have a fixed hash.
;
; Both text and sprites can be batched, meaning up to 24 quads can be drawn in one draw call.
; For sprites, we calculate the depth for each quad in the batch, and hope that subsequent 
; batches are drawn in the same order to re-use the depth with the same ordering. 
;
; Text is usually drawn twice, first a blurred background and then the crisp foreground.
; Each draw call is made up of several quads, each an individual character.
; Batching and splitting are issues that needs lots of logic to handle. 
; Batched text can drawn more than one marker at once. Character lengths are cached 
; in a buffer and 'array' when text is not split to be recalled when it is.
; Splitting is quite random and affects both batched and unbatched text. This presents 
; in multiple forms, front split and back split, where 3 or 4 draw calls will occur. Sometimes
; this will be half character splits which are easy to detect, and sometimes it will be 
; even splits, which require waiting for the next draw call to make a decision.

[Constants]
global $show_depth = 0
global $depth_map = 0
global $allow_depth = 0

; # Marker variables #
global $text_before_markers = 0
global $text_before_markers_prev = 0
global $goals_first = 0
global $counter = 0
global $texts = 0
global $markers_complete = 0
global $markers_current = 0
global $goals = 0
global $goals_prev = 0
global $goal_arrows = 0
global $intels = 0
global $intels_prev = 0
global $executes = 0
global $crosshairs = 0

; # Text variables #
global $new_chars = 0
global $chars_temp = 0
global $chars = 0
global $chars_front = 0
global $chars_back = 0
global $unknown_chars = 0
global $unknown_marker_type = 0
global $unknown_batched = 0
global $texts_drawn = 0
global $extra_drawn = 0
global $batched_intel_text = 0
global $text_cache_prev = 0

; # Sprite variables #
global $new_sprites = 0
global $blobs = 0
global $req_blobs = 0
; Special cases for custom shader
global $batched = 0
global $marker_type = 0
global $goal = 1
global $intel = 2
global $crosshair = 3
global $execute = 4
; Texture override pre and post are run together, so this is to ensure each only runs once
; Command lists are suffixed with 'Pre', 'Post' and 'Both' to indicate when they are expected to run 
global $pre = 0

[Present]
post run = CommandList_Reset

[CommandList_Reset]
; process last frame behaviour
if ($unknown_chars > 0)
    run = CommandList_SaveUnknownChars_Pre
endif
$text_before_markers_prev = $text_before_markers
$text_before_markers = 0

$intels_prev = $intels
$intels = 0
$goals_prev = $goals
$goals = 0

; reset counters
$markers_current = 0
$depth_map = 0
$texts = 0
$markers_complete = 0
$goal_arrows = 0
$blobs = 0
$executes = 0
$crosshairs = 0
$chars = 0
$chars_front = 0
$chars_back = 0
$chars_temp = 0
$texts_drawn = 0
$extra_drawn = 0
$batched_intel_text = 0

; Shouldn't be needed:
$marker_type = 0

Resource\Addons\Debug_CB.ini\DebugCB = copy ResourceDepthValue
;dump = dump_rt jpg mono o0
;run = CommandList\Configs\Array.ini\Clear
;clear = ResourceDepthValue

[KeyToggleDepth]
type = cycle
key = VK_OEM_2
$show_depth = 1, 0 


[ResourceDepthBuffer]

[ResourceMatrices]

[Resource1x1]
type = Texture2D
width = 1
height = 1
format = R32_FLOAT
mips = 1
array = 1
msaa = 1

[ResourceDepthValue]
type = RWStructuredBuffer
stride = 16
array = 16
mode = mono

; # Depth Buffer #
; Depending on the Shadow quality setting, a different shader is used for shadows, which is
; our source of the depth map. Also, if all lights are off (no shadows), we have a backup.

[ShaderOverride_DepthSourceLow]
hash = 4d53ddce5a9e8dc4
run = CommandList_CaptureDepth

[ShaderOverride_DepthSourceMediumHigh]
hash = 7c5d68afebead6cc
allow_duplicate_hash = true
run = CommandList_CaptureDepth

[ShaderOverride_DepthSourceUltra]
hash = 07554C1CC34C4400
run = CommandList_CaptureDepth

[ShaderOverride_DepthSourceBackup]
hash = FA119ACE02FB0CD0
run = CommandList_CaptureDepth

[ShaderOverride_DepthSourceSonar1]
hash = 390adf1419f9804e
run = CommandList_CaptureDepth

[ShaderOverride_DepthSourceSonar2]
hash = 32f0fb64eaee7052
run = CommandList_CaptureDepth

[CommandList_CaptureDepth]
;post ResourceDepthBuffer = stereo2mono ps-t1
post ResourceDepthBuffer = ps-t0
post ResourceMatrices = copy ps-cb11
post $depth_map = 1
if ($show_depth)
    ;Resource\Addons\Debug_2D.ini\Debug2D = ResourceDepthBuffer
else
    ;Resource\Addons\Debug_2D.ini\Debug2D = null
endif

; # Flares #
; Each light flare has depth sampled individually and isn't re-used

[ShaderOverride_LightFlares]
hash = c4c52320554d1ee9
run = CommandList_UseDepthBuffer_Both
pre vs-t13 = copy vb0
post vs-t13 = null

[CommandList_UseDepthBuffer_Both]
pre vs-t10 = ResourceDepthBuffer
post vs-t10 = null

; # Sampling Depth #
; These command lists are used to sample, cache and retrieve the depth of sprites

[CommandList_StartDepth_Both]
if ($allow_depth && $markers_current < 1 && $pre)
    pre run = CommandList_SampleDepth_Pre
endif
run = CommandList_UseDepth_Both
if (!$pre)
    post run = CommandList_CalculateDepth_Post
endif

[CommandList_SampleDepth_Pre]
if ($batched)
    run = CustomShader_SampleDepthBatched_Pre
else
    run = CustomShader_SampleDepth_Pre
endif
$markers_current = $new_sprites

[CustomShader_SampleDepth_Pre]
vs = ShaderFixes/depth_adjust_quad_vs.hlsl
ps = ShaderFixes/depth_adjust_quad_ps.hlsl
run = CommandList_CalculateDepth_Both

[CustomShader_SampleDepthBatched_Pre]
vs = ShaderFixes/depth_adjust_quad_vs_batched.hlsl
ps = ShaderFixes/depth_adjust_quad_ps.hlsl
run = CommandList_CalculateDepth_Both

[CommandList_CalculateDepth_Both]
run = CommandList_UseDepthBuffer_Both
pre vs-cb11 = ResourceMatrices
post vs-cb11 = null
pre run = CommandList_CalculateDepth_Pre

[CommandList_CalculateDepth_Pre]
run = BuiltInCommandListUnbindAllRenderTargets
; marker_index
y3 = $markers_complete
; new_chars
$\Configs\Array.ini\index = $texts
run = CommandList\Configs\Array.ini\Get
z3 = $\Configs\Array.ini\value
; marker_type
w3 = $marker_type
; run custom shader
vs-t13 = copy vb0
ps-cb11 = ResourceMatrices
ps-t10 = ResourceDepthBuffer
; must set o0 BEFORE ps-u*
o0 = set_viewport Resource1x1
ps-u1 = ResourceDepthValue
draw = from_caller

[CommandList_CalculateDepth_Post]
; marker_index
y3 = 0
; new_chars
z3 = 0
; marker_type
w3 = 0
; must set o0 BEFORE ps-u*
ps-u1 = null

[CommandList_UseDepth_Both]
if ($pre)
    pre run = CommandList_UseDepth_Pre
else if (!$pre)
    post run = CommandList_UseDepth_Post
endif

[CommandList_UseDepth_Pre]
if ($allow_depth && $marker_type)
    ; use_depth
    x3 = $markers_current
    ; marker_index
    y3 = $markers_complete
    ; marker_type
    w3 = $marker_type
    vs-t14 = ResourceDepthValue
endif

[CommandList_UseDepth_Post]
if ($allow_depth && $marker_type)
    ; use_depth
    x3 = 0
    ; marker_index
    y3 = 0
    ; marker_type
    w3 = 0
    vs-t14 = null
    ;post dump = dump_rt jpg mono o0
endif

[CommandList_EndDepth_Post]
if ($allow_depth && $marker_type)
    $markers_complete = $markers_complete + $new_sprites
    $markers_current = 0
    $marker_type = 0
    $texts_drawn = 0
endif

; # Text #
; Text is drawn back, then front, but can be split in weird ways across 3 draw calls.
; We try to keep track of how many texts are drawn before goals for the sake of intel (which has no start sprite)
; And store the number of characters per piece of text in an array structure for validating future frames

[ShaderOverride_Text]
hash = 6f56e2eb15c63f14
allow_duplicate_hash = true
$batched = 0
run = CommandList_Text_Both

[ShaderOverride_TextBatched]
hash = 9fe114e79584a0ac
allow_duplicate_hash = true
$batched = 1
run = CommandList_Text_Both
post $batched = 0

[CommandList_Text_Both]
if ($marker_type || $intels_prev || (!$markers_complete && (!$text_before_markers_prev || $text_before_markers < $text_before_markers_prev)))
    pre $allow_depth = $depth_map
    pre run = CommandList_TextFrontOrBack_Pre
    if ($allow_depth)
        ; Sometimes text is drawn before anything known, but we need to be confident it's part of a marker
        if (!$marker_type && (($chars && $chars == $\Configs\Array.ini\value_0) || $text_before_markers == $text_before_markers_prev || $markers_complete))
            if ($goals_first && $goals < $goals_prev)
                ; Seems to be a goal missing its outer graphic
                pre $marker_type = $goal
            else if ($intels < $intels_prev)
                ; Expecting an intel based on last frame
                pre $marker_type = $intel
            endif
        endif
        if ($marker_type)
            ; Part of a marker
            pre run = CommandList_TextAtDepth_Pre
            post run = CommandList_TextAtDepth_Post
        endif
    endif
    post run = CommandList_TextFrontOrBack_Post
    post $allow_depth = 0
    ; post dump = dump_rt jps o0
endif

[CommandList_TextFrontOrBack_Pre]
; Text usually alternates back/front, but sometimes the front or back can be split:
; - complete back + split front where pt1 != pt2 with partials
; - complete back + split front where pt1 != pt2
; - complete back + split front where pt1 == pt2
; - split back where pt1 != pt2 with partials + complete front
; - split back where pt1 != pt2 + complete front
; - split back where pt1 == pt2 + complete front
; - split back (2 or 3) + split front (2 or 3)
; We don't know if a back is complete until draw 3 because it could be back + front pt1 could be back pt1 + pt2:
; a + b == c : back split
; a == b + c : front split
; But we can validate using the previous frame totals, so:
; a == a(prev) : complete back
; a + b == a(prev) : split back
; But then sometimes batched text can include multiple texts from separate markers, 
; so we also compare the cache summed with the following text.
; However marker text might change, so the cache isn't 100% reliable.

$new_chars = vertex_count / 6

if ($unknown_chars != 0 && ($chars_back != $new_chars || $unknown_batched != $batched))
    ; last text was not split, so update cache like we would have for last text as new
    run = CommandList_SaveUnknownChars_Pre
endif
; retrieve the number of chars from this index text on the last frame
if ($marker_type)
    $\Configs\Array.ini\index = $texts
    run = CommandList\Configs\Array.ini\Get
    $chars_temp = $\Configs\Array.ini\value
endif
if ($chars_back == 0)
    ; Text 1, it's the back
    $chars = 0
    $chars_back = $new_chars
else if (!$extra_drawn)
    ; Text 2
    if ($chars_back % 1 != 0 && $new_chars % 1 != 0)
        ; previous and current have partial chars
        $chars_back = $chars_back + $new_chars
        $extra_drawn = 1
    else if ($chars_back == $new_chars)
        ; front matches back
        if ($new_chars == $chars_temp)
            ; matches last frame
            $chars_front = $new_chars
        else
            ; text might be new or back split evenly, so wait for next text
            $unknown_chars = $new_chars
            $unknown_marker_type = $marker_type
            $unknown_batched = $batched
            $chars_back = $chars_back + $new_chars
            $extra_drawn = 1
        endif
    else
        ; 3+
        $chars_front = $new_chars
        $extra_drawn = 1
    endif
else if ($extra_drawn == 1)
    ; Text 3
    if ($chars_front > 0 && $chars_back == $chars_front + $new_chars)
        ; 1 + 2
        $chars_front = $chars_front + $new_chars
    else if ($chars_back + $chars_front == $new_chars)
        ; 2 + 1
        $chars_back = $chars_back + $chars_front
        $chars_front = $new_chars
    else
        ; 4+
        ; need to store a fourth value
        $unknown_batched = $chars_front
        $chars_front = $new_chars
        $extra_drawn = $extra_drawn + 1
    endif
else if ($extra_drawn == 2)
    ; Text 4
    if ($chars_back + $unknown_batched == $chars_front + $new_chars)
        ; 2 + 2
        $chars_back = $chars_back + $unknown_batched
        $chars_front = $chars_front + $new_chars
    else if ($chars_back == $unknown_batched + $chars_front + $new_chars)
        ; 1 + 3
        $chars_front = $chars_front + $unknown_batched + $new_chars
    else if ($chars_back + $unknown_batched + $chars_front == $new_chars)
        ; 3 + 1
        $chars_back = $chars_back + $unknown_batched + $chars_front
        $chars_front = $new_chars
    else
        ; 5+
        ; Group 1st and 2nd to save a variable
        $chars_back = $chars_back + $unknown_batched
        ; Shift values along
        $unknown_batched = $chars_front
        $chars_front = $new_chars
        $extra_drawn = $extra_drawn + 1
    endif
else if ($extra_drawn == 3)
    if ($chars_back + $unknown_batched == $chars_front + $new_chars)
        ; 3 + 2
        $chars_back = $chars_back + $unknown_batched
        $chars_front = $chars_front + $new_chars
    else if ($chars_back == $unknown_batched + $chars_front + $new_chars)
        ; 2 + 3
        $chars_front = $chars_front + $unknown_batched + $new_chars
    else
        ; 3 + 3 (next draw call)
        $chars_back = $chars_back + $unknown_batched
        $chars_front = $chars_front + $new_chars
        $extra_drawn = $extra_drawn + 1
    endif
else
    ; 3 + 3
    $chars_front = $chars_front + $new_chars
endif
$texts_drawn = $texts_drawn + 1

[CommandList_SaveUnknownChars_Pre]
$chars_temp = $marker_type
$marker_type = $unknown_marker_type
$chars = $unknown_chars
$chars_back = $chars_back / 2
$chars_front = $chars_back
run = CommandList_CacheText_Pre
$unknown_chars = 0
$marker_type = $chars_temp
$unknown_marker_type = 0
$chars_temp = 0

[CommandList_CacheText_Pre]
if ($marker_type == $intel && $markers_current != 0.5)
    $markers_current = 0.5
endif
if (!$goals && !$intels && !$markers_current)
    $text_before_markers = $text_before_markers + $chars
endif
$\Configs\Array.ini\index = $texts
run = CommandList\Configs\Array.ini\Get
$text_cache_prev = $\Configs\Array.ini\value
if ($markers_current && $markers_current <= 1)
    ; drawing text for single goal, save the number of characters
    $\Configs\Array.ini\index = $texts
    $\Configs\Array.ini\value = $chars
    run = CommandList\Configs\Array.ini\Set
endif
$chars = $text_cache_prev
if ($markers_current > 1)
    $\Configs\Array.ini\index = $texts + 1
    run = CommandList\Configs\Array.ini\Get
    $chars = $chars + $\Configs\Array.ini\value
endif
if ($new_chars > $chars)
    $batched_intel_text = $new_chars - $chars
endif
if ($markers_current == 0.5)
    $texts = $texts + 1
else
    $texts = $texts + $markers_current
endif
$chars = $chars_back
$chars_front = 0
$chars_back = 0
$texts_drawn = 0
$extra_drawn = 0

[CommandList_TextAtDepth_Pre]
z3 = $new_chars
run = CommandList_UseDepth_Pre

[CommandList_TextAtDepth_Post]
z3 = 0
post run = CommandList_UseDepth_Post

[CommandList_TextFrontOrBack_Post]
; if text for a marker is complete
if ($chars_front == $chars_back && $texts_drawn == (2 + $extra_drawn))
    $chars = $chars_front
    run = CommandList_CacheText_Pre
    $new_chars = 0
endif

; # Sprites #
; Reliably indicate what is being drawn, texture overrides determine how to proceed.

[CommandList_SaveUnknownCharsAtBlobMarkerStart_Pre]
; last text was 'unknown', we now know it was even split, so finish the job.
if ($unknown_chars && $unknown_chars == $chars_back / 2)
    run = CommandList_SaveUnknownChars_Pre
    $new_chars = 0
endif

[ShaderOverride_Sprites]
hash = 7fdf27a3924d5530
allow_duplicate_hash = true
pre $batched = 0
run = CommandList_Sprite_Both

[ShaderOverride_SpritesBatched]
hash = 55642c752fa497f2
allow_duplicate_hash = true
pre $batched = 1
run = CommandList_Sprite_Both
post $batched = 0

[CommandList_Sprite_Both]
pre $new_sprites = vertex_count / 6
pre $allow_depth = $depth_map
pre $pre = 1
post $pre = 0
checktextureoverride = ps-t0
post $allow_depth = 0
post $new_sprites = 0

; Colour blocks are used in Intel (underline) and Capture Goals (health bars)

[ShaderOverride_BlockColourBatched]
hash = 07a16668ff270883
allow_duplicate_hash = true
pre $pre = 1
post $pre = 0
pre $allow_depth = $depth_map
run = CommandList_UseDepth_Both
post $allow_depth = 0

; # Goals #
; Goals always start with either an arrow (if off-screen) or a Hexagon.
; We use this known event to sample depth in that location.

[TextureOverride_GoalArrow]
hash = 73b56261
; start of a goal when transitioning off-screen
run = CommandList_GoalStart_Both
; extra blob is drawn when an arrow is drawn
if ($allow_depth && $markers_current && $pre)
    pre $req_blobs = $req_blobs + $new_sprites
    pre $goal_arrows = $goal_arrows + $new_sprites
endif

[TextureOverride_GoalOuter]
hash = 89951c97
; start of goal while not transitioning off-screen
run = CommandList_GoalStart_Both

[CommandList_GoalStart_Both]
pre run = CommandList_SaveUnknownCharsAtBlobMarkerStart_Pre

; We thought this was an intel, but it's a goal
if ($markers_current == 0.5 && $marker_type == $intel)
    $markers_current = 0
    $marker_type = 0
    $text_before_markers = $text_before_markers + $chars
    $\Configs\Array.ini\value_0 = $text_cache_prev
endif
if ($allow_depth && !$markers_current && $pre)
    pre $marker_type = $goal
    pre $goals = $goals + $new_sprites
endif
; Partial goal drawn
if ($markers_current && $markers_current % 1 != 0 && $new_sprites % 1 != 0 && $pre)
    pre $markers_current = $markers_current + $new_sprites
    pre $goals = $goals + $new_sprites
endif
$goals_first = !$intels
run = CommandList_BlobMarkerStart_Both

[CommandList_BlobMarkerStart_Both]
; Only increment if we're not already drawing a goal
if ($allow_depth && !$markers_current)
    pre $req_blobs = $new_sprites
endif
run = CommandList_StartDepth_Both

; These textures are in the order they are drawn, 
; but each are optional in different circumstances the 
; only consistent thing is the blob is drawn last

[TextureOverride_GoalCentre]
hash = b5e01512
; optional part of a goal
run = CommandList_UseDepth_Both

; # Goal and Intel #
; Deco Texts and Box are used for both goals and intels.
; If we are not in the middle of a goal, this indicates an unexpected intel.

[TextureOverride_DecoText1]
hash = 88cac974
; start of intel when visible, part of centre goal alternates with DecoText2
run = CommandList_IntelStart_Both

[TextureOverride_DecoText2]
hash = d5f8a4d4
; start of intel when visible, part of centre goal alternates with DecoText1
run = CommandList_IntelStart_Both

[TextureOverride_DecoBox]
hash = 873db96b
; start of intel when appearing, part of centre goal
run = CommandList_IntelStart_Both

[CommandList_IntelStart_Both]
if ($allow_depth)
    if ($pre)
        pre run = CommandList_IntelStart_Pre
    endif
    run = CommandList_BlobMarkerStart_Both
endif

[CommandList_IntelStart_Pre]
run = CommandList_SaveUnknownCharsAtBlobMarkerStart_Pre
if (!$markers_current)
    if (!$marker_type)
        ; detected a new intel
        if (!$markers_complete)
            $text_before_markers = $text_before_markers - $chars
        endif
        $marker_type = $intel
        $intels = $intels + $new_sprites
    else if ($marker_type == $goal)
        ; in a goal without a start graphic
        $goals = $goals + $new_sprites
    endif
    $\Configs\Array.ini\index = $texts
    $\Configs\Array.ini\value = $chars
    run = CommandList\Configs\Array.ini\Set
endif
if ($markers_current == 0.5)
    ; in an expected intel
    $markers_current = 1
    $texts = $texts + 0.5
    $intels = $intels + $new_sprites
endif
if ($markers_current && $markers_current < $new_sprites)
    ; an intel being drawn as part of a goal batch
    if ($text_cache_prev && $text_cache_prev != $\Configs\Array.ini\value)
        ; number of sprites has changed, which means intel text was batched with a single goal
        $\Configs\Array.ini\index = $texts - $markers_current
        run = CommandList\Configs\Array.ini\Get
        $batched_intel_text = $\Configs\Array.ini\value - $text_cache_prev
        ; Restore original cache value
        $\Configs\Array.ini\value = $text_cache_prev
        run = CommandList\Configs\Array.ini\Set
    endif
    ; only increment intel if intel text batched with goal
    ; or batch drew goals and intel, and the totals match the cache
    ; otherwise it will be done by the intel text draw
    if ($batched_intel_text > 0 || $new_sprites > 1)
        $intels = $intels + $new_sprites - $markers_current
        $\Configs\Array.ini\index = $texts
        $\Configs\Array.ini\value = $batched_intel_text
        run = CommandList\Configs\Array.ini\Set
        $texts = $texts + 1
        $batched_intel_text = 0
    endif
    $markers_current = $new_sprites
endif
$text_cache_prev = 0

; At the end of a goal or intel, a blue blob is drawn (2 if there's an arrow)
; Here we know we are done with the marker.

[TextureOverride_BlueBlob]
hash = d860b2d5
run = CommandList_BlobMarkerEnd_Both

[TextureOverride_BlueBlobAlt]
hash = 6DAD593D
run = CommandList_BlobMarkerEnd_Both

[CommandList_BlobMarkerEnd_Both]
; Used for lots of things in the HUD, not just markers
if ($allow_depth && $marker_type)
    if ($pre)
        pre $blobs = $blobs + $new_sprites
    endif
    run = CommandList_UseDepth_Both
    if ($blobs >= $req_blobs && !$pre)
        post run = CommandList_EndDepth_Post
        post $req_blobs = 0
        post $blobs = 0
    endif
endif

; # Execute #
; Execute markers are straight forward, with a known start and end graphic
; In the shader, the centre is sampled slightly below to try and hit the NPC.

[TextureOverride_ExecuteMarkStart]
hash = 90d0b12f
pre $marker_type = $execute
if ($allow_depth)
    post $executes = $executes + $new_sprites
endif
run = CommandList_StartDepth_Both

[TextureOverride_ExecuteMarkMiddle]
hash = 62de70a7
run = CommandList_UseDepth_Both

[TextureOverride_ExecuteMarkHelmetBack]
hash = ff7a9e37
run = CommandList_UseDepth_Both

[TextureOverride_ExecuteMarkHelmetFront]
hash = af41cd04
run = CommandList_UseDepth_Both

[TextureOverride_ExecuteMarkEnd]
hash = 2971c2e6
run = CommandList_UseDepth_Both
post run = CommandList_EndDepth_Post

; # Crosshair #
; Not actually a marker, but treated the same.
; Regardless of how many elements, (0, 0.2) in screen space is sampled.

[TextureOverride_Crosshair1]
hash = 4a15fb60
run = CommandList_Crosshair_Both

[TextureOverride_Crosshair2]
hash = c11fb4b5
run = CommandList_Crosshair_Both

[TextureOverride_Crosshair3]
hash = 484ed273
run = CommandList_Crosshair_Both

[TextureOverride_Crosshair4]
hash = 9941830c
run = CommandList_Crosshair_Both

[TextureOverride_Laser]
hash = 4ea3c841
run = CommandList_Crosshair_Both

[TextureOverride_CrosshairTriRotorBox]
hash = 0a5f1dbb
run = CommandList_Crosshair_Both
preset = PresetTriRotor

[PresetTriRotor]
convergence = 75

[CommandList_Crosshair_Both]
pre $marker_type = $crosshair
if ($allow_depth && $pre)
    ; treat crosshair as one element
    pre $new_sprites = 1
    pre $crosshairs = $crosshairs + 1
endif
run = CommandList_StartDepth_Both
if (!$pre)
    post run = CommandList_EndDepth_Post
endif

; # Safety #
; When we get as far as drawing the HUD icons or the Counter background,
; we know there are no more intels and further text should be left at screen depth.

[ShaderOverride_MenuAndHUDIcons]
hash = 9ceefab76c72863a
allow_duplicate_hash = true
run = CommandList_AllMarkersDrawn

[TextureOverride_CounterBG]
hash = BB37AFCA
run = CommandList_AllMarkersDrawn

[CommandList_AllMarkersDrawn]
; intel has disappeared
if ($intels_prev > $intels)
    $intels_prev = 0
endif

[CommandList_DumpTexture]
dump = dump_tex dds mono ps-t0