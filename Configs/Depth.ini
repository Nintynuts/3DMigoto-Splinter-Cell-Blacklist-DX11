; [HUD elements at Depth]
; There are several types of element we want to push to depth (after depth map is complete):
; - Light flare: Drawn at screen depth so we use the depth buffer to push each to depth.
;                Accesses the depth buffer directly via a different mechanism.
; - Intel:       These have text drawn before sprites and before other markers.
;                We use the previous frame's behaviour to include this text each frame.
; - Centre goal: These have text and several sprites. 
;                The text is drawn mid-way so we know it's included.
;                It ends with a single blob.
; - Edge goal:   These are like centre goals, but have an extra arrow sprite and no text.
;                They have 2 blobs drawn at the end because of the arrow.
; - Execute:     These are 3 simple sprites drawn in order, but the depth is sampled
;                below to try and hit the target, instead of going over their head.
; - Crosshair:   Sprites which always use the depth from the middle(ish) of the screen.
;
; With the exception of light flares, these are all 'Markers'. 
;
; The philosophy is to sample depth with a custom shader to a custom resource, then 
; re-use that same depth value for all parts of a marker until a known endpoint is 
; reached for that marker. 
;
; To that end, we have StartDepth, UseDepth and EndDepth which are triggered when 
; appropriate by TextureOverrides for sprites and ShaderOverrides for text, 
; because text textures are generated at runtime and don't have a fixed hash.
;
; Both text and sprites can be batched, meaning up to 24 quads can be drawn in one draw call.
; For sprites, we calculate the depth for each quad in the batch, and hope that subsequent 
; batches are drawn in the same order to re-use the depth with the same ordering. 
;
; Text is usually drawn twice, first a blurred background and then the crisp foreground.
; Each draw call is made up of several quads, each an individual character.
; Batching and splitting are issues that needs lots of logic to handle. 
; Batching means more than one marker can be drawn at once. Character lengths are cached 
; in a buffer and 'array' when batching is not active to be recalled when batching is active.
; Splitting is quite random and affects both batched and unbatched text. This presents 
; in multiple forms, front split and back split, where 3 draw calls will occur. Sometimes
; this will be half character splits which are easy to detect, and sometimes it will be 
; even splits, which require waiting for the next draw call to make a decision.

[Constants]
global $show_depth=0
; Variables to keep track of what's happening
global $depth_map=0
global $allow_depth=0
global $at_depth=0
; general counters
global $texts=0
global $markers=0
global $intel=0
global $intel_prev=0
global $goals=0
global $goal_arrows=0
global $executes=0
global $crosshairs=0
; text variables
global $new_chars=0
global $is_front_text=0
global $chars_temp=0
global $chars=0
global $chars_front=0
global $chars_back=0
global $new_texts=0
global $new_texts_front=0
global $new_texts_back=0
global $is_goal=0
global $unknown_chars=0
global $unknown_is_goal=0
global $texts_drawn=0
global $extra_drawn=0
; sprite variables
global $new_sprites=0
global $blobs=0
global $req_blobs=0
; Special cases for custom shader
global $batched=0
global $text=0
global $marker_type=0
global $crosshair=1
global $execute=2
; for debugging (not changed)
global $front_back_match=1
global $split_back_front=1
global $split_front_1_batched=1
global $split_front_1=1
global $split_front_2=1
global $split_back=0
global $back=0

[Present]
post run=CommandListReset

[CommandListReset]
; process last frame behaviour
if ($unknown_chars > 0)
	run=CommandListSaveUnknownChars
endif
$intel_prev = $markers - ($goals + $crosshairs + $executes)
if ($intel_prev < $intel)
	$intel_prev = $intel
endif
; reset counters
$depth_map=0
$texts=0
$markers=0
$intel=0
$goals=0
$goal_arrows=0
$executes=0
$crosshairs=0
;Resource\Addons\debug_cb.ini\debugcb=copy ResourceDepthValue

[KeyToggleDepth]
type=cycle
Key=VK_OEM_2
$show_depth=1,0

[ResourceDepthBuffer]

[ResourceMatrices]

[Resource1x1]
type=Texture2D
width=1
height=1
format=R32_FLOAT
mips=1
array=1
msaa=1

[ResourceDepthValue]
type=RWStructuredBuffer
stride=16
array=16

[CommandListUseDepthBuffer]
vs-t10=ResourceDepthBuffer

[CommandListSetDepthVariables]
run=CommandListUseDepthBuffer
vs-cb11=ResourceMatrices

[CustomShaderSampleDepth]
vs=ShaderFixes/depth_adjust_quad_vs.hlsl
ps=ShaderFixes/depth_adjust_quad_ps.hlsl
run=CommandListCalculateDepth

[CustomShaderSampleDepthBatched]
vs=ShaderFixes/depth_adjust_quad_vs_batched.hlsl
ps=ShaderFixes/depth_adjust_quad_ps.hlsl
run=CommandListCalculateDepth

[CommandListCalculateDepth]
run=BuiltInCommandListUnbindAllRenderTargets
; marker_index
y3 = $markers
post y3 = 0
; num_chars
$\configs\array.ini\index = $markers
run=CommandList\configs\array.ini\Get
z3 = $\configs\array.ini\value
post z3 = 0
; marker_type
w3 = $marker_type
post w3 = 0
; run custom shader
vs-t13=copy vb0
ps-cb11=ResourceMatrices
ps-t10=ResourceDepthBuffer
; must set o0 BEFORE ps-u*
o0=set_viewport Resource1x1
ps-u1=ResourceDepthValue
post ps-u1=null
draw=from_caller

[ShaderOverride_DepthSourceShadowBlur]
hash=60187e629aa8f9cd
post ResourceDepthBuffer=copy ps-t1
post ResourceMatrices=copy ps-cb11
post $depth_map=1
post run=CommandListDisplayDepth

[CommandListDisplayDepth]
if ($show_depth)
	;Resource\Addons\debug_2d.ini\Debug2D=ResourceDepthBuffer
else
	;Resource\Addons\debug_2d.ini\Debug2D=null
endif

[CommandListStartDepth]
if ($allow_depth && !$at_depth)
	if ($batched)
        run=CustomShaderSampleDepthBatched
	else
        run=CustomShaderSampleDepth
	endif
	$at_depth = 1
endif
run=CommandListUseDepth

[CommandListUseDepth]
if ($allow_depth && $at_depth)
	; use_depth
	x3 = 1
	post x3 = 0
	; marker_index
	y3 = $markers
	post y3 = 0
	; marker_type
	w3 = $marker_type
	post w3 = 0
	pre vs-t14=ResourceDepthValue
	post vs-t14=null
endif

[CommandListEndDepth]
if ($allow_depth && $at_depth)
	; If we had a marker without text
	if ($texts < $markers)
		$text = $markers
		$\configs\array.ini\index = $markers
		$\configs\array.ini\value = 0
		run=CommandList\configs\array.ini\Set
	endif
	$markers = $markers + $new_sprites
	$at_depth = 0
	$texts_drawn=0
endif

[ShaderOverride_LightFlares]
hash=c4c52320554d1ee9
run=CommandListUseDepthBuffer
vs-t13=copy vb0

[CommandListTextBatched]
; get cached number of characters
$\configs\array.ini\index = $markers + $new_texts
run=CommandList\configs\array.ini\Get
; avoid stack overflow if no more recorded character counts
if ($\configs\array.ini\value != 0)
	; deduct cached length from element count to get remainder
	$chars_temp = $chars_temp - $\configs\array.ini\value
	if ($chars_temp >= 0)
		$new_texts = $new_texts + 1
	endif
	if ($chars_temp > 0)
		; repeat for more text for next goal
		; pre required to prevent stack overflow
		pre run=CommandListTextBatched
	else if ($chars_temp < 0)
		; partial batch, wait for next draw call
		$extra_drawn = $extra_drawn + 1
	endif
endif

[CommandListTextInner]
$texts_drawn = $texts_drawn + 1
$new_texts = 0
; append new chars to previous (in case it was partial)
$chars = $chars + $new_chars
if ($batched)
	$chars_temp = $chars
	run=CommandListTextBatched
else if ($new_chars % 1 == 0)
	$new_texts = $new_texts + 1
endif
; if text for a marker is complete
if ($is_front_text && $chars == $chars_back && $texts_drawn == (2 + $extra_drawn))
	run=CommandListCacheText
endif

[CommandListCacheText]
if (!$batched)
	; drawing text for single goal, save the number of characters
	$\configs\array.ini\index = $texts
	$\configs\array.ini\value = $chars
	run=CommandList\configs\array.ini\Set
endif
$texts = $texts + $new_texts
$chars = 0
$chars_back = 0
$new_texts_back = 0
$texts_drawn = 0
$extra_drawn = 0
if (!$is_goal)
	$intel = $intel + $new_texts
endif
$new_texts = 0

[CommandListSaveUnknownChars]
$is_goal = $unknown_is_goal
$chars = $unknown_chars
if (!$batched)
	$new_texts = 1
	run=CommandListCacheText
endif
$unknown_chars = 0

[CommandListTextFrontOrBack]
$new_chars = vertex_count / 6
; Text usually alternates back/front,
; but sometimes backs are drawn in multiple batches
; then the front is drawn in one batch
; last text was not split, so update cache like we would have for last text as new
if ($unknown_chars != 0 && $chars_back != $new_chars)
	$chars_temp = $is_goal
	run=CommandListSaveUnknownChars
	$is_goal = $chars_temp
endif
$\configs\array.ini\index = $texts
run=CommandList\configs\array.ini\Get
; nothing set, it's the back
if ($chars_back == 0)
	$is_front_text = $back
else
	; back split evenly, batched  (looks like a match, but it's not if partial)
	if ($chars_back == $new_chars && $batched && $texts_drawn == 2 && $extra_drawn != 0)
		$is_front_text = $split_back
		$extra_drawn = $extra_drawn + 1
	; front matches back
	else if ($chars_back == $new_chars)
		; matches last frame (or batch with no partials)
		if ($batched || $new_chars == $\configs\array.ini\value)
			$is_front_text = $front_back_match
			$unknown_chars = 0
		else
			; text might be new or back split evenly, so wait for next text
			$unknown_chars = $new_chars
			$unknown_is_goal = $is_goal
			$is_front_text = $split_back
		endif
	; back split (two backs drawn already)
	else if ($texts_drawn == 2 && $chars_front == 0)
		$is_front_text = $split_back_front
	; front split pt 1 batched (back is complete)
	else if ($batched && $extra_drawn == 0)
		$is_front_text = $split_front_1_batched	
	; front split pt 2 (new front + prev front = back)
	else if ($chars_front > 0 && $chars_front + $new_chars == $chars_back)
		$is_front_text = $split_front_2
	; front split pt 1 (back matches previous)
	else if ($chars_back == $\configs\array.ini\value)
		$is_front_text = $split_front_1
		$extra_drawn = $extra_drawn + 1
	else	
		$is_front_text = $split_back
		$extra_drawn = $extra_drawn + 1
	endif
endif
if ($is_front_text)
	$chars = $chars_front
	$new_texts = $new_texts_front
else	
	$chars = $chars_back
	$new_texts = $new_texts_back
endif
; pass partial num_chars to shader
z3 = $chars
post z3 = 0
run=CommandListUseDepth
post run=CommandListTextInner
if ($is_front_text)
	post $chars_front = $chars
	post $new_texts_front = $new_texts
else
	post $chars_back = $chars
	post $new_texts_back = $new_texts
endif

[CommandListTextIsGoal]
; text while at depth is part of a centre goal
if (($texts - $intel) < ($goals - $goal_arrows) && $at_depth)
	$is_goal = 1
	run=CommandListTextFrontOrBack
else if ($intel_prev > 0 && $goals == 0)
	; assume we're at depth
	$at_depth = 1
	$is_goal = 0
	run=CommandListTextFrontOrBack
	post $at_depth=0
endif

[CommandListTextAtDepth]
$allow_depth = $depth_map
post $allow_depth = $depth_map
if ($allow_depth)
	run=CommandListTextIsGoal
endif
$allow_depth = 0
post $allow_depth = 0

[ShaderOverride_Text]
hash=6f56e2eb15c63f14
allow_duplicate_hash=true
$text = 1
$batched = 0
run=CommandListTextAtDepth

[ShaderOverride_TextBatched]
hash=9fe114e79584a0ac
allow_duplicate_hash=true
$text = 1
$batched = 1
run=CommandListTextAtDepth
post $batched = 0

[CommandListSprite]
$new_sprites = vertex_count / 6
$allow_depth = $depth_map
post $allow_depth = $depth_map
checktextureoverride=ps-t0
$allow_depth = 0
post $allow_depth = 0

[ShaderOverride_Sprites]
hash=7fdf27a3924d5530
allow_duplicate_hash=true
$text = 0
$batched = 0
run=CommandListSprite

[ShaderOverride_SpritesBatched]
hash=55642c752fa497f2
allow_duplicate_hash=true
$text = 0
$batched = 1
run=CommandListSprite
post $batched = 0

[ShaderOverride_BlockColourBatched]
hash=07a16668ff270883
allow_duplicate_hash=true
run=CommandListSetDepthVariables
vs-cb11=ResourceMatrices

[CommandListCrosshair]
$marker_type = $crosshair
if ($allow_depth)
	; treat crosshair as one element
	$new_sprites = 1
	$crosshairs = $crosshairs + 1
endif
run=CommandListStartDepth
post run=CommandListEndDepth
post $marker_type = 0

[PresetTriRotor]
convergence = 75

[TextureOverride_Crosshair1]
hash=4a15fb60
run=CommandListCrosshair
[TextureOverride_Crosshair2]
hash=c11fb4b5
run=CommandListCrosshair
[TextureOverride_Crosshair3]
hash=484ed273
run=CommandListCrosshair
[TextureOverride_Crosshair4]
hash=9941830c
run=CommandListCrosshair
[TextureOverride_CrosshairTriRotorBox]
hash=0a5f1dbb
run=CommandListCrosshair
preset=PresetTriRotor

[CommandListBlobMarkerStart]
; Only increment if we're not already drawing a goal
if ($allow_depth && !$at_depth)
	pre $req_blobs=1
endif
run=CommandListStartDepth

; These textures are in the order they are drawn, 
; but each are optional in different circumstances the 
; only consistent thing is the blob is drawn last
[TextureOverride_GoalOuter]
hash=89951c97
; start of goal while not transitioning off-screen
if ($allow_depth)
	pre $goals = $goals + $new_sprites
endif
run=CommandListBlobMarkerStart
[TextureOverride_GoalCentre]
hash=b5e01512
; optional part of a goal
run=CommandListUseDepth
[TextureOverride_GoalArrow]
hash=73b56261
; start of a goal when transitioning off-screen
if ($allow_depth && !$at_depth)
	pre $goals = $goals + $new_sprites
endif
run=CommandListBlobMarkerStart
; extra blob is drawn when an arrow is drawn
if ($allow_depth && $at_depth)
	$req_blobs = $req_blobs + 1
	$goal_arrows = $goal_arrows + 1
endif
[TextureOverride_DecoText1]
hash=88cac974
; start of intel when visible, part of centre goal alternates with DecoText2
run=CommandListBlobMarkerStart
[TextureOverride_DecoText2]
hash=d5f8a4d4
; start of intel when visible, part of centre goal alternates with DecoText1
run=CommandListBlobMarkerStart
[TextureOverride_DecoBox]
hash=873db96b
; start of intel when appearing, part of centre goal
run=CommandListBlobMarkerStart
[TextureOverride_BlueBlob]
hash=d860b2d5
; Used for lots of things in the HUD, not just markers
if ($allow_depth)
	; start of an intel when it is disappearing
	if ($intel > $markers)
		run=CommandListBlobMarkerStart
	endif
	if ($at_depth)
		pre $blobs = $blobs + 1
		run=CommandListUseDepth
		if ($blobs == $req_blobs)
			post run=CommandListEndDepth
			post $req_blobs = 0
			post $blobs = 0
		endif
	endif
endif


[TextureOverride_ExecuteMarkStart]
hash=90d0b12f
$marker_type = $execute
if ($allow_depth)
	post $executes = $executes + $new_sprites	
endif
run=CommandListStartDepth
post $marker_type = 0
[TextureOverride_ExecuteMarkMiddle]
hash=62de70a7
run=CommandListUseDepth
[TextureOverride_ExecuteMarkHelmetBack]
hash=ff7a9e37
run=CommandListUseDepth
[TextureOverride_ExecuteMarkHelmetFront]
hash=af41cd04
run=CommandListUseDepth
[TextureOverride_ExecuteMarkEnd]
hash=2971c2e6
run=CommandListUseDepth
post run=CommandListEndDepth